
L433_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f88  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002114  08002114  00012114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002154  08002154  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002154  08002154  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002154  08002154  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002154  08002154  00012154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002158  08002158  00012158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800215c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  2000000c  08002168  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000003c  08002168  0002003c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000564f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000010e1  00000000  00000000  0002568b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000578  00000000  00000000  00026770  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000004d0  00000000  00000000  00026ce8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000202bd  00000000  00000000  000271b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000573d  00000000  00000000  00047475  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c29ce  00000000  00000000  0004cbb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010f580  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000013c8  00000000  00000000  0010f5fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080020fc 	.word	0x080020fc

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080020fc 	.word	0x080020fc

080001cc <led>:
 *      Author: Professional
 */
#include "main.h"

void led(int8_t number, int8_t rank)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	4603      	mov	r3, r0
 80001d4:	460a      	mov	r2, r1
 80001d6:	71fb      	strb	r3, [r7, #7]
 80001d8:	4613      	mov	r3, r2
 80001da:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(LED_Anode1_GPIO_Port,LED_Anode1_Pin,1);
 80001dc:	2201      	movs	r2, #1
 80001de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001e6:	f001 f8db 	bl	80013a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_Anode2_GPIO_Port,LED_Anode2_Pin,1);
 80001ea:	2201      	movs	r2, #1
 80001ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001f0:	48e9      	ldr	r0, [pc, #932]	; (8000598 <led+0x3cc>)
 80001f2:	f001 f8d5 	bl	80013a0 <HAL_GPIO_WritePin>
	if(rank == 1)
 80001f6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80001fa:	2b01      	cmp	r3, #1
 80001fc:	f040 81ce 	bne.w	800059c <led+0x3d0>
	{
				switch(number)
 8000200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000204:	2b09      	cmp	r3, #9
 8000206:	f200 837b 	bhi.w	8000900 <led+0x734>
 800020a:	a201      	add	r2, pc, #4	; (adr r2, 8000210 <led+0x44>)
 800020c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000210:	08000239 	.word	0x08000239
 8000214:	0800028f 	.word	0x0800028f
 8000218:	080002e5 	.word	0x080002e5
 800021c:	0800033b 	.word	0x0800033b
 8000220:	08000391 	.word	0x08000391
 8000224:	080003e7 	.word	0x080003e7
 8000228:	0800043d 	.word	0x0800043d
 800022c:	08000493 	.word	0x08000493
 8000230:	080004e9 	.word	0x080004e9
 8000234:	0800053f 	.word	0x0800053f
				{
				case 0:

					  HAL_GPIO_WritePin(LED_a1_GPIO_Port,LED_a1_Pin,0);
 8000238:	2200      	movs	r2, #0
 800023a:	2110      	movs	r1, #16
 800023c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000240:	f001 f8ae 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_b1_GPIO_Port,LED_b1_Pin,0);
 8000244:	2200      	movs	r2, #0
 8000246:	2120      	movs	r1, #32
 8000248:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800024c:	f001 f8a8 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_c1_GPIO_Port,LED_c1_Pin,0);
 8000250:	2200      	movs	r2, #0
 8000252:	2108      	movs	r1, #8
 8000254:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000258:	f001 f8a2 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_d1_GPIO_Port,LED_d1_Pin,0);
 800025c:	2200      	movs	r2, #0
 800025e:	2104      	movs	r1, #4
 8000260:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000264:	f001 f89c 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_e1_GPIO_Port,LED_e1_Pin,0);
 8000268:	2200      	movs	r2, #0
 800026a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800026e:	48ca      	ldr	r0, [pc, #808]	; (8000598 <led+0x3cc>)
 8000270:	f001 f896 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_f1_GPIO_Port,LED_f1_Pin,0);
 8000274:	2200      	movs	r2, #0
 8000276:	f44f 7100 	mov.w	r1, #512	; 0x200
 800027a:	48c7      	ldr	r0, [pc, #796]	; (8000598 <led+0x3cc>)
 800027c:	f001 f890 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_g1_GPIO_Port,LED_g1_Pin,1);
 8000280:	2201      	movs	r2, #1
 8000282:	2102      	movs	r1, #2
 8000284:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000288:	f001 f88a 	bl	80013a0 <HAL_GPIO_WritePin>
					  break;
 800028c:	e338      	b.n	8000900 <led+0x734>
				case 1:
					  HAL_GPIO_WritePin(LED_a1_GPIO_Port,LED_a1_Pin,1);
 800028e:	2201      	movs	r2, #1
 8000290:	2110      	movs	r1, #16
 8000292:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000296:	f001 f883 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_b1_GPIO_Port,LED_b1_Pin,0);
 800029a:	2200      	movs	r2, #0
 800029c:	2120      	movs	r1, #32
 800029e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002a2:	f001 f87d 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_c1_GPIO_Port,LED_c1_Pin,0);
 80002a6:	2200      	movs	r2, #0
 80002a8:	2108      	movs	r1, #8
 80002aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ae:	f001 f877 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_d1_GPIO_Port,LED_d1_Pin,1);
 80002b2:	2201      	movs	r2, #1
 80002b4:	2104      	movs	r1, #4
 80002b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ba:	f001 f871 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_e1_GPIO_Port,LED_e1_Pin,1);
 80002be:	2201      	movs	r2, #1
 80002c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002c4:	48b4      	ldr	r0, [pc, #720]	; (8000598 <led+0x3cc>)
 80002c6:	f001 f86b 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_f1_GPIO_Port,LED_f1_Pin,1);
 80002ca:	2201      	movs	r2, #1
 80002cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002d0:	48b1      	ldr	r0, [pc, #708]	; (8000598 <led+0x3cc>)
 80002d2:	f001 f865 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_g1_GPIO_Port,LED_g1_Pin,1);
 80002d6:	2201      	movs	r2, #1
 80002d8:	2102      	movs	r1, #2
 80002da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002de:	f001 f85f 	bl	80013a0 <HAL_GPIO_WritePin>
					  break;
 80002e2:	e30d      	b.n	8000900 <led+0x734>
				case 2:
					  HAL_GPIO_WritePin(LED_a1_GPIO_Port,LED_a1_Pin,0);
 80002e4:	2200      	movs	r2, #0
 80002e6:	2110      	movs	r1, #16
 80002e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ec:	f001 f858 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_b1_GPIO_Port,LED_b1_Pin,0);
 80002f0:	2200      	movs	r2, #0
 80002f2:	2120      	movs	r1, #32
 80002f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002f8:	f001 f852 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_c1_GPIO_Port,LED_c1_Pin,1);
 80002fc:	2201      	movs	r2, #1
 80002fe:	2108      	movs	r1, #8
 8000300:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000304:	f001 f84c 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_d1_GPIO_Port,LED_d1_Pin,0);
 8000308:	2200      	movs	r2, #0
 800030a:	2104      	movs	r1, #4
 800030c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000310:	f001 f846 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_e1_GPIO_Port,LED_e1_Pin,0);
 8000314:	2200      	movs	r2, #0
 8000316:	f44f 7180 	mov.w	r1, #256	; 0x100
 800031a:	489f      	ldr	r0, [pc, #636]	; (8000598 <led+0x3cc>)
 800031c:	f001 f840 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_f1_GPIO_Port,LED_f1_Pin,1);
 8000320:	2201      	movs	r2, #1
 8000322:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000326:	489c      	ldr	r0, [pc, #624]	; (8000598 <led+0x3cc>)
 8000328:	f001 f83a 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_g1_GPIO_Port,LED_g1_Pin,0);
 800032c:	2200      	movs	r2, #0
 800032e:	2102      	movs	r1, #2
 8000330:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000334:	f001 f834 	bl	80013a0 <HAL_GPIO_WritePin>
					  break;
 8000338:	e2e2      	b.n	8000900 <led+0x734>
				case 3:
					  HAL_GPIO_WritePin(LED_a1_GPIO_Port,LED_a1_Pin,0);
 800033a:	2200      	movs	r2, #0
 800033c:	2110      	movs	r1, #16
 800033e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000342:	f001 f82d 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_b1_GPIO_Port,LED_b1_Pin,0);
 8000346:	2200      	movs	r2, #0
 8000348:	2120      	movs	r1, #32
 800034a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800034e:	f001 f827 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_c1_GPIO_Port,LED_c1_Pin,0);
 8000352:	2200      	movs	r2, #0
 8000354:	2108      	movs	r1, #8
 8000356:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800035a:	f001 f821 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_d1_GPIO_Port,LED_d1_Pin,0);
 800035e:	2200      	movs	r2, #0
 8000360:	2104      	movs	r1, #4
 8000362:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000366:	f001 f81b 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_e1_GPIO_Port,LED_e1_Pin,1);
 800036a:	2201      	movs	r2, #1
 800036c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000370:	4889      	ldr	r0, [pc, #548]	; (8000598 <led+0x3cc>)
 8000372:	f001 f815 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_f1_GPIO_Port,LED_f1_Pin,1);
 8000376:	2201      	movs	r2, #1
 8000378:	f44f 7100 	mov.w	r1, #512	; 0x200
 800037c:	4886      	ldr	r0, [pc, #536]	; (8000598 <led+0x3cc>)
 800037e:	f001 f80f 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_g1_GPIO_Port,LED_g1_Pin,0);
 8000382:	2200      	movs	r2, #0
 8000384:	2102      	movs	r1, #2
 8000386:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800038a:	f001 f809 	bl	80013a0 <HAL_GPIO_WritePin>
					  break;
 800038e:	e2b7      	b.n	8000900 <led+0x734>
				case 4:
					  HAL_GPIO_WritePin(LED_a1_GPIO_Port,LED_a1_Pin,1);
 8000390:	2201      	movs	r2, #1
 8000392:	2110      	movs	r1, #16
 8000394:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000398:	f001 f802 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_b1_GPIO_Port,LED_b1_Pin,0);
 800039c:	2200      	movs	r2, #0
 800039e:	2120      	movs	r1, #32
 80003a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003a4:	f000 fffc 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_c1_GPIO_Port,LED_c1_Pin,0);
 80003a8:	2200      	movs	r2, #0
 80003aa:	2108      	movs	r1, #8
 80003ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003b0:	f000 fff6 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_d1_GPIO_Port,LED_d1_Pin,1);
 80003b4:	2201      	movs	r2, #1
 80003b6:	2104      	movs	r1, #4
 80003b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003bc:	f000 fff0 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_e1_GPIO_Port,LED_e1_Pin,1);
 80003c0:	2201      	movs	r2, #1
 80003c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003c6:	4874      	ldr	r0, [pc, #464]	; (8000598 <led+0x3cc>)
 80003c8:	f000 ffea 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_f1_GPIO_Port,LED_f1_Pin,0);
 80003cc:	2200      	movs	r2, #0
 80003ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003d2:	4871      	ldr	r0, [pc, #452]	; (8000598 <led+0x3cc>)
 80003d4:	f000 ffe4 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_g1_GPIO_Port,LED_g1_Pin,0);
 80003d8:	2200      	movs	r2, #0
 80003da:	2102      	movs	r1, #2
 80003dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003e0:	f000 ffde 	bl	80013a0 <HAL_GPIO_WritePin>
					  break;
 80003e4:	e28c      	b.n	8000900 <led+0x734>
				case 5:
					  HAL_GPIO_WritePin(LED_a1_GPIO_Port,LED_a1_Pin,0);
 80003e6:	2200      	movs	r2, #0
 80003e8:	2110      	movs	r1, #16
 80003ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ee:	f000 ffd7 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_b1_GPIO_Port,LED_b1_Pin,1);
 80003f2:	2201      	movs	r2, #1
 80003f4:	2120      	movs	r1, #32
 80003f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003fa:	f000 ffd1 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_c1_GPIO_Port,LED_c1_Pin,0);
 80003fe:	2200      	movs	r2, #0
 8000400:	2108      	movs	r1, #8
 8000402:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000406:	f000 ffcb 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_d1_GPIO_Port,LED_d1_Pin,0);
 800040a:	2200      	movs	r2, #0
 800040c:	2104      	movs	r1, #4
 800040e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000412:	f000 ffc5 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_e1_GPIO_Port,LED_e1_Pin,1);
 8000416:	2201      	movs	r2, #1
 8000418:	f44f 7180 	mov.w	r1, #256	; 0x100
 800041c:	485e      	ldr	r0, [pc, #376]	; (8000598 <led+0x3cc>)
 800041e:	f000 ffbf 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_f1_GPIO_Port,LED_f1_Pin,0);
 8000422:	2200      	movs	r2, #0
 8000424:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000428:	485b      	ldr	r0, [pc, #364]	; (8000598 <led+0x3cc>)
 800042a:	f000 ffb9 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_g1_GPIO_Port,LED_g1_Pin,0);
 800042e:	2200      	movs	r2, #0
 8000430:	2102      	movs	r1, #2
 8000432:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000436:	f000 ffb3 	bl	80013a0 <HAL_GPIO_WritePin>
					  break;
 800043a:	e261      	b.n	8000900 <led+0x734>
				case 6:
					  HAL_GPIO_WritePin(LED_a1_GPIO_Port,LED_a1_Pin,0);
 800043c:	2200      	movs	r2, #0
 800043e:	2110      	movs	r1, #16
 8000440:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000444:	f000 ffac 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_b1_GPIO_Port,LED_b1_Pin,1);
 8000448:	2201      	movs	r2, #1
 800044a:	2120      	movs	r1, #32
 800044c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000450:	f000 ffa6 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_c1_GPIO_Port,LED_c1_Pin,0);
 8000454:	2200      	movs	r2, #0
 8000456:	2108      	movs	r1, #8
 8000458:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800045c:	f000 ffa0 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_d1_GPIO_Port,LED_d1_Pin,0);
 8000460:	2200      	movs	r2, #0
 8000462:	2104      	movs	r1, #4
 8000464:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000468:	f000 ff9a 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_e1_GPIO_Port,LED_e1_Pin,0);
 800046c:	2200      	movs	r2, #0
 800046e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000472:	4849      	ldr	r0, [pc, #292]	; (8000598 <led+0x3cc>)
 8000474:	f000 ff94 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_f1_GPIO_Port,LED_f1_Pin,0);
 8000478:	2200      	movs	r2, #0
 800047a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800047e:	4846      	ldr	r0, [pc, #280]	; (8000598 <led+0x3cc>)
 8000480:	f000 ff8e 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_g1_GPIO_Port,LED_g1_Pin,0);
 8000484:	2200      	movs	r2, #0
 8000486:	2102      	movs	r1, #2
 8000488:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800048c:	f000 ff88 	bl	80013a0 <HAL_GPIO_WritePin>
					  break;
 8000490:	e236      	b.n	8000900 <led+0x734>
				case 7:
					  HAL_GPIO_WritePin(LED_a1_GPIO_Port,LED_a1_Pin,0);
 8000492:	2200      	movs	r2, #0
 8000494:	2110      	movs	r1, #16
 8000496:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800049a:	f000 ff81 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_b1_GPIO_Port,LED_b1_Pin,0);
 800049e:	2200      	movs	r2, #0
 80004a0:	2120      	movs	r1, #32
 80004a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004a6:	f000 ff7b 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_c1_GPIO_Port,LED_c1_Pin,0);
 80004aa:	2200      	movs	r2, #0
 80004ac:	2108      	movs	r1, #8
 80004ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004b2:	f000 ff75 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_d1_GPIO_Port,LED_d1_Pin,1);
 80004b6:	2201      	movs	r2, #1
 80004b8:	2104      	movs	r1, #4
 80004ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004be:	f000 ff6f 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_e1_GPIO_Port,LED_e1_Pin,1);
 80004c2:	2201      	movs	r2, #1
 80004c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004c8:	4833      	ldr	r0, [pc, #204]	; (8000598 <led+0x3cc>)
 80004ca:	f000 ff69 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_f1_GPIO_Port,LED_f1_Pin,1);
 80004ce:	2201      	movs	r2, #1
 80004d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004d4:	4830      	ldr	r0, [pc, #192]	; (8000598 <led+0x3cc>)
 80004d6:	f000 ff63 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_g1_GPIO_Port,LED_g1_Pin,1);
 80004da:	2201      	movs	r2, #1
 80004dc:	2102      	movs	r1, #2
 80004de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e2:	f000 ff5d 	bl	80013a0 <HAL_GPIO_WritePin>
					  break;
 80004e6:	e20b      	b.n	8000900 <led+0x734>

				case 8:
					  HAL_GPIO_WritePin(LED_a1_GPIO_Port,LED_a1_Pin,0);
 80004e8:	2200      	movs	r2, #0
 80004ea:	2110      	movs	r1, #16
 80004ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004f0:	f000 ff56 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_b1_GPIO_Port,LED_b1_Pin,0);
 80004f4:	2200      	movs	r2, #0
 80004f6:	2120      	movs	r1, #32
 80004f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004fc:	f000 ff50 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_c1_GPIO_Port,LED_c1_Pin,0);
 8000500:	2200      	movs	r2, #0
 8000502:	2108      	movs	r1, #8
 8000504:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000508:	f000 ff4a 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_d1_GPIO_Port,LED_d1_Pin,0);
 800050c:	2200      	movs	r2, #0
 800050e:	2104      	movs	r1, #4
 8000510:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000514:	f000 ff44 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_e1_GPIO_Port,LED_e1_Pin,0);
 8000518:	2200      	movs	r2, #0
 800051a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800051e:	481e      	ldr	r0, [pc, #120]	; (8000598 <led+0x3cc>)
 8000520:	f000 ff3e 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_f1_GPIO_Port,LED_f1_Pin,0);
 8000524:	2200      	movs	r2, #0
 8000526:	f44f 7100 	mov.w	r1, #512	; 0x200
 800052a:	481b      	ldr	r0, [pc, #108]	; (8000598 <led+0x3cc>)
 800052c:	f000 ff38 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_g1_GPIO_Port,LED_g1_Pin,0);
 8000530:	2200      	movs	r2, #0
 8000532:	2102      	movs	r1, #2
 8000534:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000538:	f000 ff32 	bl	80013a0 <HAL_GPIO_WritePin>
					  break;
 800053c:	e1e0      	b.n	8000900 <led+0x734>
				case 9:
					  HAL_GPIO_WritePin(LED_a1_GPIO_Port,LED_a1_Pin,0);
 800053e:	2200      	movs	r2, #0
 8000540:	2110      	movs	r1, #16
 8000542:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000546:	f000 ff2b 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_b1_GPIO_Port,LED_b1_Pin,0);
 800054a:	2200      	movs	r2, #0
 800054c:	2120      	movs	r1, #32
 800054e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000552:	f000 ff25 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_c1_GPIO_Port,LED_c1_Pin,0);
 8000556:	2200      	movs	r2, #0
 8000558:	2108      	movs	r1, #8
 800055a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800055e:	f000 ff1f 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_d1_GPIO_Port,LED_d1_Pin,0);
 8000562:	2200      	movs	r2, #0
 8000564:	2104      	movs	r1, #4
 8000566:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800056a:	f000 ff19 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_e1_GPIO_Port,LED_e1_Pin,1);
 800056e:	2201      	movs	r2, #1
 8000570:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000574:	4808      	ldr	r0, [pc, #32]	; (8000598 <led+0x3cc>)
 8000576:	f000 ff13 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_f1_GPIO_Port,LED_f1_Pin,0);
 800057a:	2200      	movs	r2, #0
 800057c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000580:	4805      	ldr	r0, [pc, #20]	; (8000598 <led+0x3cc>)
 8000582:	f000 ff0d 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_g1_GPIO_Port,LED_g1_Pin,0);
 8000586:	2200      	movs	r2, #0
 8000588:	2102      	movs	r1, #2
 800058a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800058e:	f000 ff07 	bl	80013a0 <HAL_GPIO_WritePin>
					  break;
 8000592:	bf00      	nop
 8000594:	e1b4      	b.n	8000900 <led+0x734>
 8000596:	bf00      	nop
 8000598:	48000400 	.word	0x48000400
				}
	}
	else if(rank == 2)
 800059c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80005a0:	2b02      	cmp	r3, #2
 80005a2:	f040 81ad 	bne.w	8000900 <led+0x734>
	{
		switch(number)
 80005a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005aa:	2b09      	cmp	r3, #9
 80005ac:	f200 81a8 	bhi.w	8000900 <led+0x734>
 80005b0:	a201      	add	r2, pc, #4	; (adr r2, 80005b8 <led+0x3ec>)
 80005b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005b6:	bf00      	nop
 80005b8:	080005e1 	.word	0x080005e1
 80005bc:	08000631 	.word	0x08000631
 80005c0:	08000681 	.word	0x08000681
 80005c4:	080006d1 	.word	0x080006d1
 80005c8:	08000721 	.word	0x08000721
 80005cc:	08000771 	.word	0x08000771
 80005d0:	080007c1 	.word	0x080007c1
 80005d4:	08000811 	.word	0x08000811
 80005d8:	08000861 	.word	0x08000861
 80005dc:	080008b1 	.word	0x080008b1
				{
				case 0:

					  HAL_GPIO_WritePin(LED_a2_GPIO_Port,LED_a2_Pin,0);
 80005e0:	2200      	movs	r2, #0
 80005e2:	2104      	movs	r1, #4
 80005e4:	48c8      	ldr	r0, [pc, #800]	; (8000908 <led+0x73c>)
 80005e6:	f000 fedb 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_b2_GPIO_Port,LED_b2_Pin,0);
 80005ea:	2200      	movs	r2, #0
 80005ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005f0:	48c5      	ldr	r0, [pc, #788]	; (8000908 <led+0x73c>)
 80005f2:	f000 fed5 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_c2_GPIO_Port,LED_c2_Pin,0);
 80005f6:	2200      	movs	r2, #0
 80005f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005fc:	48c2      	ldr	r0, [pc, #776]	; (8000908 <led+0x73c>)
 80005fe:	f000 fecf 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_d2_GPIO_Port,LED_d2_Pin,0);
 8000602:	2200      	movs	r2, #0
 8000604:	2180      	movs	r1, #128	; 0x80
 8000606:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800060a:	f000 fec9 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_e2_GPIO_Port,LED_e2_Pin,0);
 800060e:	2200      	movs	r2, #0
 8000610:	2140      	movs	r1, #64	; 0x40
 8000612:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000616:	f000 fec3 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_f2_GPIO_Port,LED_f2_Pin,0);
 800061a:	2200      	movs	r2, #0
 800061c:	2101      	movs	r1, #1
 800061e:	48ba      	ldr	r0, [pc, #744]	; (8000908 <led+0x73c>)
 8000620:	f000 febe 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_g2_GPIO_Port,LED_g2_Pin,1);
 8000624:	2201      	movs	r2, #1
 8000626:	2102      	movs	r1, #2
 8000628:	48b7      	ldr	r0, [pc, #732]	; (8000908 <led+0x73c>)
 800062a:	f000 feb9 	bl	80013a0 <HAL_GPIO_WritePin>
					  break;
 800062e:	e167      	b.n	8000900 <led+0x734>
				case 1:
					  HAL_GPIO_WritePin(LED_a2_GPIO_Port,LED_a2_Pin,1);
 8000630:	2201      	movs	r2, #1
 8000632:	2104      	movs	r1, #4
 8000634:	48b4      	ldr	r0, [pc, #720]	; (8000908 <led+0x73c>)
 8000636:	f000 feb3 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_b2_GPIO_Port,LED_b2_Pin,0);
 800063a:	2200      	movs	r2, #0
 800063c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000640:	48b1      	ldr	r0, [pc, #708]	; (8000908 <led+0x73c>)
 8000642:	f000 fead 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_c2_GPIO_Port,LED_c2_Pin,0);
 8000646:	2200      	movs	r2, #0
 8000648:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800064c:	48ae      	ldr	r0, [pc, #696]	; (8000908 <led+0x73c>)
 800064e:	f000 fea7 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_d2_GPIO_Port,LED_d2_Pin,1);
 8000652:	2201      	movs	r2, #1
 8000654:	2180      	movs	r1, #128	; 0x80
 8000656:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800065a:	f000 fea1 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_e2_GPIO_Port,LED_e2_Pin,1);
 800065e:	2201      	movs	r2, #1
 8000660:	2140      	movs	r1, #64	; 0x40
 8000662:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000666:	f000 fe9b 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_f2_GPIO_Port,LED_f2_Pin,1);
 800066a:	2201      	movs	r2, #1
 800066c:	2101      	movs	r1, #1
 800066e:	48a6      	ldr	r0, [pc, #664]	; (8000908 <led+0x73c>)
 8000670:	f000 fe96 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_g2_GPIO_Port,LED_g2_Pin,1);
 8000674:	2201      	movs	r2, #1
 8000676:	2102      	movs	r1, #2
 8000678:	48a3      	ldr	r0, [pc, #652]	; (8000908 <led+0x73c>)
 800067a:	f000 fe91 	bl	80013a0 <HAL_GPIO_WritePin>
					  break;
 800067e:	e13f      	b.n	8000900 <led+0x734>
				case 2:
					  HAL_GPIO_WritePin(LED_a2_GPIO_Port,LED_a2_Pin,0);
 8000680:	2200      	movs	r2, #0
 8000682:	2104      	movs	r1, #4
 8000684:	48a0      	ldr	r0, [pc, #640]	; (8000908 <led+0x73c>)
 8000686:	f000 fe8b 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_b2_GPIO_Port,LED_b2_Pin,0);
 800068a:	2200      	movs	r2, #0
 800068c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000690:	489d      	ldr	r0, [pc, #628]	; (8000908 <led+0x73c>)
 8000692:	f000 fe85 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_c2_GPIO_Port,LED_c2_Pin,1);
 8000696:	2201      	movs	r2, #1
 8000698:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800069c:	489a      	ldr	r0, [pc, #616]	; (8000908 <led+0x73c>)
 800069e:	f000 fe7f 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_d2_GPIO_Port,LED_d2_Pin,0);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2180      	movs	r1, #128	; 0x80
 80006a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006aa:	f000 fe79 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_e2_GPIO_Port,LED_e2_Pin,0);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2140      	movs	r1, #64	; 0x40
 80006b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b6:	f000 fe73 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_f2_GPIO_Port,LED_f2_Pin,1);
 80006ba:	2201      	movs	r2, #1
 80006bc:	2101      	movs	r1, #1
 80006be:	4892      	ldr	r0, [pc, #584]	; (8000908 <led+0x73c>)
 80006c0:	f000 fe6e 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_g2_GPIO_Port,LED_g2_Pin,0);
 80006c4:	2200      	movs	r2, #0
 80006c6:	2102      	movs	r1, #2
 80006c8:	488f      	ldr	r0, [pc, #572]	; (8000908 <led+0x73c>)
 80006ca:	f000 fe69 	bl	80013a0 <HAL_GPIO_WritePin>
					  break;
 80006ce:	e117      	b.n	8000900 <led+0x734>
				case 3:
					  HAL_GPIO_WritePin(LED_a2_GPIO_Port,LED_a2_Pin,0);
 80006d0:	2200      	movs	r2, #0
 80006d2:	2104      	movs	r1, #4
 80006d4:	488c      	ldr	r0, [pc, #560]	; (8000908 <led+0x73c>)
 80006d6:	f000 fe63 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_b2_GPIO_Port,LED_b2_Pin,0);
 80006da:	2200      	movs	r2, #0
 80006dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006e0:	4889      	ldr	r0, [pc, #548]	; (8000908 <led+0x73c>)
 80006e2:	f000 fe5d 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_c2_GPIO_Port,LED_c2_Pin,0);
 80006e6:	2200      	movs	r2, #0
 80006e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006ec:	4886      	ldr	r0, [pc, #536]	; (8000908 <led+0x73c>)
 80006ee:	f000 fe57 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_d2_GPIO_Port,LED_d2_Pin,0);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2180      	movs	r1, #128	; 0x80
 80006f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006fa:	f000 fe51 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_e2_GPIO_Port,LED_e2_Pin,1);
 80006fe:	2201      	movs	r2, #1
 8000700:	2140      	movs	r1, #64	; 0x40
 8000702:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000706:	f000 fe4b 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_f2_GPIO_Port,LED_f2_Pin,1);
 800070a:	2201      	movs	r2, #1
 800070c:	2101      	movs	r1, #1
 800070e:	487e      	ldr	r0, [pc, #504]	; (8000908 <led+0x73c>)
 8000710:	f000 fe46 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_g2_GPIO_Port,LED_g2_Pin,0);
 8000714:	2200      	movs	r2, #0
 8000716:	2102      	movs	r1, #2
 8000718:	487b      	ldr	r0, [pc, #492]	; (8000908 <led+0x73c>)
 800071a:	f000 fe41 	bl	80013a0 <HAL_GPIO_WritePin>
					  break;
 800071e:	e0ef      	b.n	8000900 <led+0x734>
				case 4:
					  HAL_GPIO_WritePin(LED_a2_GPIO_Port,LED_a2_Pin,1);
 8000720:	2201      	movs	r2, #1
 8000722:	2104      	movs	r1, #4
 8000724:	4878      	ldr	r0, [pc, #480]	; (8000908 <led+0x73c>)
 8000726:	f000 fe3b 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_b2_GPIO_Port,LED_b2_Pin,0);
 800072a:	2200      	movs	r2, #0
 800072c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000730:	4875      	ldr	r0, [pc, #468]	; (8000908 <led+0x73c>)
 8000732:	f000 fe35 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_c2_GPIO_Port,LED_c2_Pin,0);
 8000736:	2200      	movs	r2, #0
 8000738:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800073c:	4872      	ldr	r0, [pc, #456]	; (8000908 <led+0x73c>)
 800073e:	f000 fe2f 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_d2_GPIO_Port,LED_d2_Pin,1);
 8000742:	2201      	movs	r2, #1
 8000744:	2180      	movs	r1, #128	; 0x80
 8000746:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800074a:	f000 fe29 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_e2_GPIO_Port,LED_e2_Pin,1);
 800074e:	2201      	movs	r2, #1
 8000750:	2140      	movs	r1, #64	; 0x40
 8000752:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000756:	f000 fe23 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_f2_GPIO_Port,LED_f2_Pin,0);
 800075a:	2200      	movs	r2, #0
 800075c:	2101      	movs	r1, #1
 800075e:	486a      	ldr	r0, [pc, #424]	; (8000908 <led+0x73c>)
 8000760:	f000 fe1e 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_g2_GPIO_Port,LED_g2_Pin,0);
 8000764:	2200      	movs	r2, #0
 8000766:	2102      	movs	r1, #2
 8000768:	4867      	ldr	r0, [pc, #412]	; (8000908 <led+0x73c>)
 800076a:	f000 fe19 	bl	80013a0 <HAL_GPIO_WritePin>
					  break;
 800076e:	e0c7      	b.n	8000900 <led+0x734>
				case 5:
					  HAL_GPIO_WritePin(LED_a2_GPIO_Port,LED_a2_Pin,0);
 8000770:	2200      	movs	r2, #0
 8000772:	2104      	movs	r1, #4
 8000774:	4864      	ldr	r0, [pc, #400]	; (8000908 <led+0x73c>)
 8000776:	f000 fe13 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_b2_GPIO_Port,LED_b2_Pin,1);
 800077a:	2201      	movs	r2, #1
 800077c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000780:	4861      	ldr	r0, [pc, #388]	; (8000908 <led+0x73c>)
 8000782:	f000 fe0d 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_c2_GPIO_Port,LED_c2_Pin,0);
 8000786:	2200      	movs	r2, #0
 8000788:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800078c:	485e      	ldr	r0, [pc, #376]	; (8000908 <led+0x73c>)
 800078e:	f000 fe07 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_d2_GPIO_Port,LED_d2_Pin,0);
 8000792:	2200      	movs	r2, #0
 8000794:	2180      	movs	r1, #128	; 0x80
 8000796:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800079a:	f000 fe01 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_e2_GPIO_Port,LED_e2_Pin,1);
 800079e:	2201      	movs	r2, #1
 80007a0:	2140      	movs	r1, #64	; 0x40
 80007a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a6:	f000 fdfb 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_f2_GPIO_Port,LED_f2_Pin,0);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2101      	movs	r1, #1
 80007ae:	4856      	ldr	r0, [pc, #344]	; (8000908 <led+0x73c>)
 80007b0:	f000 fdf6 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_g2_GPIO_Port,LED_g2_Pin,0);
 80007b4:	2200      	movs	r2, #0
 80007b6:	2102      	movs	r1, #2
 80007b8:	4853      	ldr	r0, [pc, #332]	; (8000908 <led+0x73c>)
 80007ba:	f000 fdf1 	bl	80013a0 <HAL_GPIO_WritePin>
					  break;
 80007be:	e09f      	b.n	8000900 <led+0x734>
				case 6:
					  HAL_GPIO_WritePin(LED_a2_GPIO_Port,LED_a2_Pin,0);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2104      	movs	r1, #4
 80007c4:	4850      	ldr	r0, [pc, #320]	; (8000908 <led+0x73c>)
 80007c6:	f000 fdeb 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_b2_GPIO_Port,LED_b2_Pin,1);
 80007ca:	2201      	movs	r2, #1
 80007cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007d0:	484d      	ldr	r0, [pc, #308]	; (8000908 <led+0x73c>)
 80007d2:	f000 fde5 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_c2_GPIO_Port,LED_c2_Pin,0);
 80007d6:	2200      	movs	r2, #0
 80007d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007dc:	484a      	ldr	r0, [pc, #296]	; (8000908 <led+0x73c>)
 80007de:	f000 fddf 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_d2_GPIO_Port,LED_d2_Pin,0);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2180      	movs	r1, #128	; 0x80
 80007e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ea:	f000 fdd9 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_e2_GPIO_Port,LED_e2_Pin,0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2140      	movs	r1, #64	; 0x40
 80007f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f6:	f000 fdd3 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_f2_GPIO_Port,LED_f2_Pin,0);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2101      	movs	r1, #1
 80007fe:	4842      	ldr	r0, [pc, #264]	; (8000908 <led+0x73c>)
 8000800:	f000 fdce 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_g2_GPIO_Port,LED_g2_Pin,0);
 8000804:	2200      	movs	r2, #0
 8000806:	2102      	movs	r1, #2
 8000808:	483f      	ldr	r0, [pc, #252]	; (8000908 <led+0x73c>)
 800080a:	f000 fdc9 	bl	80013a0 <HAL_GPIO_WritePin>
					  break;
 800080e:	e077      	b.n	8000900 <led+0x734>
				case 7:
					  HAL_GPIO_WritePin(LED_a2_GPIO_Port,LED_a2_Pin,0);
 8000810:	2200      	movs	r2, #0
 8000812:	2104      	movs	r1, #4
 8000814:	483c      	ldr	r0, [pc, #240]	; (8000908 <led+0x73c>)
 8000816:	f000 fdc3 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_b2_GPIO_Port,LED_b2_Pin,0);
 800081a:	2200      	movs	r2, #0
 800081c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000820:	4839      	ldr	r0, [pc, #228]	; (8000908 <led+0x73c>)
 8000822:	f000 fdbd 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_c2_GPIO_Port,LED_c2_Pin,0);
 8000826:	2200      	movs	r2, #0
 8000828:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800082c:	4836      	ldr	r0, [pc, #216]	; (8000908 <led+0x73c>)
 800082e:	f000 fdb7 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_d2_GPIO_Port,LED_d2_Pin,1);
 8000832:	2201      	movs	r2, #1
 8000834:	2180      	movs	r1, #128	; 0x80
 8000836:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800083a:	f000 fdb1 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_e2_GPIO_Port,LED_e2_Pin,1);
 800083e:	2201      	movs	r2, #1
 8000840:	2140      	movs	r1, #64	; 0x40
 8000842:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000846:	f000 fdab 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_f2_GPIO_Port,LED_f2_Pin,1);
 800084a:	2201      	movs	r2, #1
 800084c:	2101      	movs	r1, #1
 800084e:	482e      	ldr	r0, [pc, #184]	; (8000908 <led+0x73c>)
 8000850:	f000 fda6 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_g2_GPIO_Port,LED_g2_Pin,1);
 8000854:	2201      	movs	r2, #1
 8000856:	2102      	movs	r1, #2
 8000858:	482b      	ldr	r0, [pc, #172]	; (8000908 <led+0x73c>)
 800085a:	f000 fda1 	bl	80013a0 <HAL_GPIO_WritePin>
					  break;
 800085e:	e04f      	b.n	8000900 <led+0x734>

				case 8:
					  HAL_GPIO_WritePin(LED_a2_GPIO_Port,LED_a2_Pin,0);
 8000860:	2200      	movs	r2, #0
 8000862:	2104      	movs	r1, #4
 8000864:	4828      	ldr	r0, [pc, #160]	; (8000908 <led+0x73c>)
 8000866:	f000 fd9b 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_b2_GPIO_Port,LED_b2_Pin,0);
 800086a:	2200      	movs	r2, #0
 800086c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000870:	4825      	ldr	r0, [pc, #148]	; (8000908 <led+0x73c>)
 8000872:	f000 fd95 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_c2_GPIO_Port,LED_c2_Pin,0);
 8000876:	2200      	movs	r2, #0
 8000878:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800087c:	4822      	ldr	r0, [pc, #136]	; (8000908 <led+0x73c>)
 800087e:	f000 fd8f 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_d2_GPIO_Port,LED_d2_Pin,0);
 8000882:	2200      	movs	r2, #0
 8000884:	2180      	movs	r1, #128	; 0x80
 8000886:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800088a:	f000 fd89 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_e2_GPIO_Port,LED_e2_Pin,0);
 800088e:	2200      	movs	r2, #0
 8000890:	2140      	movs	r1, #64	; 0x40
 8000892:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000896:	f000 fd83 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_f2_GPIO_Port,LED_f2_Pin,0);
 800089a:	2200      	movs	r2, #0
 800089c:	2101      	movs	r1, #1
 800089e:	481a      	ldr	r0, [pc, #104]	; (8000908 <led+0x73c>)
 80008a0:	f000 fd7e 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_g2_GPIO_Port,LED_g2_Pin,0);
 80008a4:	2200      	movs	r2, #0
 80008a6:	2102      	movs	r1, #2
 80008a8:	4817      	ldr	r0, [pc, #92]	; (8000908 <led+0x73c>)
 80008aa:	f000 fd79 	bl	80013a0 <HAL_GPIO_WritePin>
					  break;
 80008ae:	e027      	b.n	8000900 <led+0x734>
				case 9:
					  HAL_GPIO_WritePin(LED_a2_GPIO_Port,LED_a2_Pin,0);
 80008b0:	2200      	movs	r2, #0
 80008b2:	2104      	movs	r1, #4
 80008b4:	4814      	ldr	r0, [pc, #80]	; (8000908 <led+0x73c>)
 80008b6:	f000 fd73 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_b2_GPIO_Port,LED_b2_Pin,0);
 80008ba:	2200      	movs	r2, #0
 80008bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008c0:	4811      	ldr	r0, [pc, #68]	; (8000908 <led+0x73c>)
 80008c2:	f000 fd6d 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_c2_GPIO_Port,LED_c2_Pin,0);
 80008c6:	2200      	movs	r2, #0
 80008c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008cc:	480e      	ldr	r0, [pc, #56]	; (8000908 <led+0x73c>)
 80008ce:	f000 fd67 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_d2_GPIO_Port,LED_d2_Pin,0);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2180      	movs	r1, #128	; 0x80
 80008d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008da:	f000 fd61 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_e2_GPIO_Port,LED_e2_Pin,1);
 80008de:	2201      	movs	r2, #1
 80008e0:	2140      	movs	r1, #64	; 0x40
 80008e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e6:	f000 fd5b 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_f2_GPIO_Port,LED_f2_Pin,0);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2101      	movs	r1, #1
 80008ee:	4806      	ldr	r0, [pc, #24]	; (8000908 <led+0x73c>)
 80008f0:	f000 fd56 	bl	80013a0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_g2_GPIO_Port,LED_g2_Pin,0);
 80008f4:	2200      	movs	r2, #0
 80008f6:	2102      	movs	r1, #2
 80008f8:	4803      	ldr	r0, [pc, #12]	; (8000908 <led+0x73c>)
 80008fa:	f000 fd51 	bl	80013a0 <HAL_GPIO_WritePin>
					  break;
 80008fe:	bf00      	nop
	else if(rank == 0)
	{

	}

}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	48000400 	.word	0x48000400

0800090c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0

  HAL_Init();
 8000910:	f000 fa3b 	bl	8000d8a <HAL_Init>
  SystemClock_Config();
 8000914:	f000 f8c8 	bl	8000aa8 <SystemClock_Config>
  MX_GPIO_Init();
 8000918:	f000 f90c 	bl	8000b34 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  //HAL_GPIO_WritePin(Relay_GPIO_Port,Relay_Pin, 1);
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(LED_Anode1_GPIO_Port,LED_Anode1_Pin,0);
 800091c:	2200      	movs	r2, #0
 800091e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000922:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000926:	f000 fd3b 	bl	80013a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_Anode2_GPIO_Port,LED_Anode2_Pin,0);
 800092a:	2200      	movs	r2, #0
 800092c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000930:	4854      	ldr	r0, [pc, #336]	; (8000a84 <main+0x178>)
 8000932:	f000 fd35 	bl	80013a0 <HAL_GPIO_WritePin>
  i=0;
 8000936:	4b54      	ldr	r3, [pc, #336]	; (8000a88 <main+0x17c>)
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
  j=0;
 800093c:	4b53      	ldr	r3, [pc, #332]	; (8000a8c <main+0x180>)
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
  Button1wasPressed=0;
 8000942:	4b53      	ldr	r3, [pc, #332]	; (8000a90 <main+0x184>)
 8000944:	2200      	movs	r2, #0
 8000946:	701a      	strb	r2, [r3, #0]
  Button2wasPressed=0;
 8000948:	4b52      	ldr	r3, [pc, #328]	; (8000a94 <main+0x188>)
 800094a:	2200      	movs	r2, #0
 800094c:	701a      	strb	r2, [r3, #0]
  ToggleVar1=0;
 800094e:	4b52      	ldr	r3, [pc, #328]	; (8000a98 <main+0x18c>)
 8000950:	2200      	movs	r2, #0
 8000952:	701a      	strb	r2, [r3, #0]

  while (1)
  {
    /* USER CODE END WHILE */
	  if(i>=2) HAL_GPIO_WritePin(Relay_GPIO_Port,Relay_Pin,1); //переключение рэле
 8000954:	4b4c      	ldr	r3, [pc, #304]	; (8000a88 <main+0x17c>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b01      	cmp	r3, #1
 800095a:	dd07      	ble.n	800096c <main+0x60>
 800095c:	2201      	movs	r2, #1
 800095e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000962:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000966:	f000 fd1b 	bl	80013a0 <HAL_GPIO_WritePin>
 800096a:	e006      	b.n	800097a <main+0x6e>
	  else HAL_GPIO_WritePin(Relay_GPIO_Port,Relay_Pin,0);
 800096c:	2200      	movs	r2, #0
 800096e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000972:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000976:	f000 fd13 	bl	80013a0 <HAL_GPIO_WritePin>


	  if(i>=0)
 800097a:	4b43      	ldr	r3, [pc, #268]	; (8000a88 <main+0x17c>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	2b00      	cmp	r3, #0
 8000980:	db5b      	blt.n	8000a3a <main+0x12e>
	  {
		  SensButton3 = HAL_GPIO_ReadPin(SensBut3_GPIO_Port, SensBut3_Pin);
 8000982:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000986:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800098a:	f000 fcf1 	bl	8001370 <HAL_GPIO_ReadPin>
 800098e:	4603      	mov	r3, r0
 8000990:	461a      	mov	r2, r3
 8000992:	4b42      	ldr	r3, [pc, #264]	; (8000a9c <main+0x190>)
 8000994:	701a      	strb	r2, [r3, #0]
		  if(SensButton3 == 1)
 8000996:	4b41      	ldr	r3, [pc, #260]	; (8000a9c <main+0x190>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b01      	cmp	r3, #1
 800099c:	d112      	bne.n	80009c4 <main+0xb8>
			 {
				  led(i,1);
 800099e:	4b3a      	ldr	r3, [pc, #232]	; (8000a88 <main+0x17c>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	b25b      	sxtb	r3, r3
 80009a4:	2101      	movs	r1, #1
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff fc10 	bl	80001cc <led>
				  led(j,2);
 80009ac:	4b37      	ldr	r3, [pc, #220]	; (8000a8c <main+0x180>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	b25b      	sxtb	r3, r3
 80009b2:	2102      	movs	r1, #2
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff fc09 	bl	80001cc <led>
				  j++;
 80009ba:	4b34      	ldr	r3, [pc, #208]	; (8000a8c <main+0x180>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	3301      	adds	r3, #1
 80009c0:	4a32      	ldr	r2, [pc, #200]	; (8000a8c <main+0x180>)
 80009c2:	6013      	str	r3, [r2, #0]
			 }

		  SensButton2 = HAL_GPIO_ReadPin(SensBut2_GPIO_Port, SensBut2_Pin);
 80009c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009cc:	f000 fcd0 	bl	8001370 <HAL_GPIO_ReadPin>
 80009d0:	4603      	mov	r3, r0
 80009d2:	461a      	mov	r2, r3
 80009d4:	4b32      	ldr	r3, [pc, #200]	; (8000aa0 <main+0x194>)
 80009d6:	701a      	strb	r2, [r3, #0]
		  if(SensButton2 == 1)
 80009d8:	4b31      	ldr	r3, [pc, #196]	; (8000aa0 <main+0x194>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d112      	bne.n	8000a06 <main+0xfa>
			 {
				  led(i,1);
 80009e0:	4b29      	ldr	r3, [pc, #164]	; (8000a88 <main+0x17c>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	b25b      	sxtb	r3, r3
 80009e6:	2101      	movs	r1, #1
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff fbef 	bl	80001cc <led>
				  led(j,2);
 80009ee:	4b27      	ldr	r3, [pc, #156]	; (8000a8c <main+0x180>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	b25b      	sxtb	r3, r3
 80009f4:	2102      	movs	r1, #2
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff fbe8 	bl	80001cc <led>
				  j--;
 80009fc:	4b23      	ldr	r3, [pc, #140]	; (8000a8c <main+0x180>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	3b01      	subs	r3, #1
 8000a02:	4a22      	ldr	r2, [pc, #136]	; (8000a8c <main+0x180>)
 8000a04:	6013      	str	r3, [r2, #0]
			 }

		  if(j>9) //Для счета десятков
 8000a06:	4b21      	ldr	r3, [pc, #132]	; (8000a8c <main+0x180>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	2b09      	cmp	r3, #9
 8000a0c:	dd08      	ble.n	8000a20 <main+0x114>
		  {
			  i++;
 8000a0e:	4b1e      	ldr	r3, [pc, #120]	; (8000a88 <main+0x17c>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	3301      	adds	r3, #1
 8000a14:	4a1c      	ldr	r2, [pc, #112]	; (8000a88 <main+0x17c>)
 8000a16:	6013      	str	r3, [r2, #0]
			  j=0;
 8000a18:	4b1c      	ldr	r3, [pc, #112]	; (8000a8c <main+0x180>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	e012      	b.n	8000a46 <main+0x13a>
		  }
		  else if(j<0)
 8000a20:	4b1a      	ldr	r3, [pc, #104]	; (8000a8c <main+0x180>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	da0e      	bge.n	8000a46 <main+0x13a>
		  {
			  i--;
 8000a28:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <main+0x17c>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	3b01      	subs	r3, #1
 8000a2e:	4a16      	ldr	r2, [pc, #88]	; (8000a88 <main+0x17c>)
 8000a30:	6013      	str	r3, [r2, #0]
			  j=9;
 8000a32:	4b16      	ldr	r3, [pc, #88]	; (8000a8c <main+0x180>)
 8000a34:	2209      	movs	r2, #9
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	e005      	b.n	8000a46 <main+0x13a>
		  }

	  }
	  else
	  {
		  i=0;
 8000a3a:	4b13      	ldr	r3, [pc, #76]	; (8000a88 <main+0x17c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
		  j=0;
 8000a40:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <main+0x180>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]





	  SensButton1 = HAL_GPIO_ReadPin(SensBut1_GPIO_Port, SensBut1_Pin);
 8000a46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a4e:	f000 fc8f 	bl	8001370 <HAL_GPIO_ReadPin>
 8000a52:	4603      	mov	r3, r0
 8000a54:	461a      	mov	r2, r3
 8000a56:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <main+0x198>)
 8000a58:	701a      	strb	r2, [r3, #0]
	  if(SensButton1 == 1)
 8000a5a:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <main+0x198>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d10a      	bne.n	8000a78 <main+0x16c>
		  {
			HAL_GPIO_TogglePin(LED_Anode1_GPIO_Port,LED_Anode1_Pin);
 8000a62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a6a:	f000 fcb1 	bl	80013d0 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_Anode2_GPIO_Port,LED_Anode2_Pin);
 8000a6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a72:	4804      	ldr	r0, [pc, #16]	; (8000a84 <main+0x178>)
 8000a74:	f000 fcac 	bl	80013d0 <HAL_GPIO_TogglePin>
		  }

	  HAL_Delay(300);
 8000a78:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a7c:	f000 f9f6 	bl	8000e6c <HAL_Delay>
	  if(i>=2) HAL_GPIO_WritePin(Relay_GPIO_Port,Relay_Pin,1); //переключение рэле
 8000a80:	e768      	b.n	8000954 <main+0x48>
 8000a82:	bf00      	nop
 8000a84:	48000400 	.word	0x48000400
 8000a88:	20000030 	.word	0x20000030
 8000a8c:	20000028 	.word	0x20000028
 8000a90:	2000002d 	.word	0x2000002d
 8000a94:	20000036 	.word	0x20000036
 8000a98:	20000035 	.word	0x20000035
 8000a9c:	2000002c 	.word	0x2000002c
 8000aa0:	20000034 	.word	0x20000034
 8000aa4:	2000002e 	.word	0x2000002e

08000aa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b096      	sub	sp, #88	; 0x58
 8000aac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	2244      	movs	r2, #68	; 0x44
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f001 fb18 	bl	80020ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000abc:	463b      	mov	r3, r7
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	60da      	str	r2, [r3, #12]
 8000ac8:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000aca:	2310      	movs	r3, #16
 8000acc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ad6:	2360      	movs	r3, #96	; 0x60
 8000ad8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ada:	2300      	movs	r3, #0
 8000adc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ade:	f107 0314 	add.w	r3, r7, #20
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 fcf2 	bl	80014cc <HAL_RCC_OscConfig>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <SystemClock_Config+0x4a>
  {
    Error_Handler();
 8000aee:	f000 f893 	bl	8000c18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af2:	230f      	movs	r3, #15
 8000af4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000af6:	2300      	movs	r3, #0
 8000af8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000afa:	2300      	movs	r3, #0
 8000afc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b02:	2300      	movs	r3, #0
 8000b04:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b06:	463b      	mov	r3, r7
 8000b08:	2100      	movs	r1, #0
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f001 f8fe 	bl	8001d0c <HAL_RCC_ClockConfig>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000b16:	f000 f87f 	bl	8000c18 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b1a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b1e:	f000 fc7f 	bl	8001420 <HAL_PWREx_ControlVoltageScaling>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000b28:	f000 f876 	bl	8000c18 <Error_Handler>
  }
}
 8000b2c:	bf00      	nop
 8000b2e:	3758      	adds	r7, #88	; 0x58
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b088      	sub	sp, #32
 8000b38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3a:	f107 030c 	add.w	r3, r7, #12
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
 8000b48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	4b31      	ldr	r3, [pc, #196]	; (8000c10 <MX_GPIO_Init+0xdc>)
 8000b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4e:	4a30      	ldr	r2, [pc, #192]	; (8000c10 <MX_GPIO_Init+0xdc>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b56:	4b2e      	ldr	r3, [pc, #184]	; (8000c10 <MX_GPIO_Init+0xdc>)
 8000b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	60bb      	str	r3, [r7, #8]
 8000b60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b62:	4b2b      	ldr	r3, [pc, #172]	; (8000c10 <MX_GPIO_Init+0xdc>)
 8000b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b66:	4a2a      	ldr	r2, [pc, #168]	; (8000c10 <MX_GPIO_Init+0xdc>)
 8000b68:	f043 0302 	orr.w	r3, r3, #2
 8000b6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b6e:	4b28      	ldr	r3, [pc, #160]	; (8000c10 <MX_GPIO_Init+0xdc>)
 8000b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b72:	f003 0302 	and.w	r3, r3, #2
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_g1_Pin|LED_d1_Pin|LED_c1_Pin|LED_a1_Pin 
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	21fe      	movs	r1, #254	; 0xfe
 8000b7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b82:	f000 fc0d 	bl	80013a0 <HAL_GPIO_WritePin>
                          |LED_b1_Pin|LED_e2_Pin|LED_d2_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_f2_Pin|LED_g2_Pin|LED_c2_Pin|LED_b2_Pin 
 8000b86:	2201      	movs	r2, #1
 8000b88:	f640 7107 	movw	r1, #3847	; 0xf07
 8000b8c:	4821      	ldr	r0, [pc, #132]	; (8000c14 <MX_GPIO_Init+0xe0>)
 8000b8e:	f000 fc07 	bl	80013a0 <HAL_GPIO_WritePin>
                          |LED_e1_Pin|LED_f1_Pin|LED_a2_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|LED_Anode2_Pin|piezo_p_Pin, GPIO_PIN_RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	f248 0124 	movw	r1, #32804	; 0x8024
 8000b98:	481e      	ldr	r0, [pc, #120]	; (8000c14 <MX_GPIO_Init+0xe0>)
 8000b9a:	f000 fc01 	bl	80013a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Anode1_Pin|Relay_Pin, GPIO_PIN_RESET);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8000ba4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba8:	f000 fbfa 	bl	80013a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_g1_Pin LED_d1_Pin LED_c1_Pin LED_a1_Pin 
                           LED_b1_Pin LED_e2_Pin LED_d2_Pin LED_Anode1_Pin 
                           Relay_Pin */
  GPIO_InitStruct.Pin = LED_g1_Pin|LED_d1_Pin|LED_c1_Pin|LED_a1_Pin 
 8000bac:	f248 13fe 	movw	r3, #33278	; 0x81fe
 8000bb0:	60fb      	str	r3, [r7, #12]
                          |LED_b1_Pin|LED_e2_Pin|LED_d2_Pin|LED_Anode1_Pin 
                          |Relay_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbe:	f107 030c 	add.w	r3, r7, #12
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc8:	f000 fa58 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_f2_Pin LED_g2_Pin PB2 LED_c2_Pin 
                           LED_b2_Pin LED_Anode2_Pin piezo_p_Pin LED_e1_Pin 
                           LED_f1_Pin */
  GPIO_InitStruct.Pin = LED_f2_Pin|LED_g2_Pin|GPIO_PIN_2|LED_c2_Pin 
 8000bcc:	f648 7327 	movw	r3, #36647	; 0x8f27
 8000bd0:	60fb      	str	r3, [r7, #12]
                          |LED_b2_Pin|LED_Anode2_Pin|piezo_p_Pin|LED_e1_Pin 
                          |LED_f1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bde:	f107 030c 	add.w	r3, r7, #12
 8000be2:	4619      	mov	r1, r3
 8000be4:	480b      	ldr	r0, [pc, #44]	; (8000c14 <MX_GPIO_Init+0xe0>)
 8000be6:	f000 fa49 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pins : SensBut1_Pin SensBut2_Pin SensBut3_Pin */
  GPIO_InitStruct.Pin = SensBut1_Pin|SensBut2_Pin|SensBut3_Pin;
 8000bea:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8000bee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf8:	f107 030c 	add.w	r3, r7, #12
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c02:	f000 fa3b 	bl	800107c <HAL_GPIO_Init>

}
 8000c06:	bf00      	nop
 8000c08:	3720      	adds	r7, #32
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40021000 	.word	0x40021000
 8000c14:	48000400 	.word	0x48000400

08000c18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
	...

08000c28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2e:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <HAL_MspInit+0x44>)
 8000c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c32:	4a0e      	ldr	r2, [pc, #56]	; (8000c6c <HAL_MspInit+0x44>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	6613      	str	r3, [r2, #96]	; 0x60
 8000c3a:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <HAL_MspInit+0x44>)
 8000c3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c46:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <HAL_MspInit+0x44>)
 8000c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c4a:	4a08      	ldr	r2, [pc, #32]	; (8000c6c <HAL_MspInit+0x44>)
 8000c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c50:	6593      	str	r3, [r2, #88]	; 0x58
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <HAL_MspInit+0x44>)
 8000c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	40021000 	.word	0x40021000

08000c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c82:	e7fe      	b.n	8000c82 <HardFault_Handler+0x4>

08000c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <MemManage_Handler+0x4>

08000c8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c8e:	e7fe      	b.n	8000c8e <BusFault_Handler+0x4>

08000c90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <UsageFault_Handler+0x4>

08000c96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc4:	f000 f8b4 	bl	8000e30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cd0:	4b17      	ldr	r3, [pc, #92]	; (8000d30 <SystemInit+0x64>)
 8000cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cd6:	4a16      	ldr	r2, [pc, #88]	; (8000d30 <SystemInit+0x64>)
 8000cd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ce0:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <SystemInit+0x68>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a13      	ldr	r2, [pc, #76]	; (8000d34 <SystemInit+0x68>)
 8000ce6:	f043 0301 	orr.w	r3, r3, #1
 8000cea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000cec:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <SystemInit+0x68>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000cf2:	4b10      	ldr	r3, [pc, #64]	; (8000d34 <SystemInit+0x68>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a0f      	ldr	r2, [pc, #60]	; (8000d34 <SystemInit+0x68>)
 8000cf8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000cfc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000d00:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000d02:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <SystemInit+0x68>)
 8000d04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d08:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d0a:	4b0a      	ldr	r3, [pc, #40]	; (8000d34 <SystemInit+0x68>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a09      	ldr	r2, [pc, #36]	; (8000d34 <SystemInit+0x68>)
 8000d10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d14:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000d16:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <SystemInit+0x68>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d1c:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <SystemInit+0x64>)
 8000d1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d22:	609a      	str	r2, [r3, #8]
#endif
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	e000ed00 	.word	0xe000ed00
 8000d34:	40021000 	.word	0x40021000

08000d38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d70 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000d3c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000d3e:	e003      	b.n	8000d48 <LoopCopyDataInit>

08000d40 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000d40:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000d42:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000d44:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000d46:	3104      	adds	r1, #4

08000d48 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000d48:	480b      	ldr	r0, [pc, #44]	; (8000d78 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000d4c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000d4e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000d50:	d3f6      	bcc.n	8000d40 <CopyDataInit>
	ldr	r2, =_sbss
 8000d52:	4a0b      	ldr	r2, [pc, #44]	; (8000d80 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000d54:	e002      	b.n	8000d5c <LoopFillZerobss>

08000d56 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000d56:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000d58:	f842 3b04 	str.w	r3, [r2], #4

08000d5c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000d5c:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <LoopForever+0x16>)
	cmp	r2, r3
 8000d5e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000d60:	d3f9      	bcc.n	8000d56 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d62:	f7ff ffb3 	bl	8000ccc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d66:	f001 f99d 	bl	80020a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d6a:	f7ff fdcf 	bl	800090c <main>

08000d6e <LoopForever>:

LoopForever:
    b LoopForever
 8000d6e:	e7fe      	b.n	8000d6e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d70:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000d74:	0800215c 	.word	0x0800215c
	ldr	r0, =_sdata
 8000d78:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000d7c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000d80:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000d84:	2000003c 	.word	0x2000003c

08000d88 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d88:	e7fe      	b.n	8000d88 <ADC1_IRQHandler>

08000d8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d90:	2300      	movs	r3, #0
 8000d92:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d94:	2003      	movs	r0, #3
 8000d96:	f000 f93d 	bl	8001014 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f000 f80e 	bl	8000dbc <HAL_InitTick>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d002      	beq.n	8000dac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	71fb      	strb	r3, [r7, #7]
 8000daa:	e001      	b.n	8000db0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dac:	f7ff ff3c 	bl	8000c28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000db0:	79fb      	ldrb	r3, [r7, #7]
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000dc8:	4b16      	ldr	r3, [pc, #88]	; (8000e24 <HAL_InitTick+0x68>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d022      	beq.n	8000e16 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000dd0:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <HAL_InitTick+0x6c>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <HAL_InitTick+0x68>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ddc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de4:	4618      	mov	r0, r3
 8000de6:	f000 f93c 	bl	8001062 <HAL_SYSTICK_Config>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d10f      	bne.n	8000e10 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2b0f      	cmp	r3, #15
 8000df4:	d809      	bhi.n	8000e0a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df6:	2200      	movs	r2, #0
 8000df8:	6879      	ldr	r1, [r7, #4]
 8000dfa:	f04f 30ff 	mov.w	r0, #4294967295
 8000dfe:	f000 f914 	bl	800102a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e02:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <HAL_InitTick+0x70>)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6013      	str	r3, [r2, #0]
 8000e08:	e007      	b.n	8000e1a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	73fb      	strb	r3, [r7, #15]
 8000e0e:	e004      	b.n	8000e1a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e10:	2301      	movs	r3, #1
 8000e12:	73fb      	strb	r3, [r7, #15]
 8000e14:	e001      	b.n	8000e1a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3710      	adds	r7, #16
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000008 	.word	0x20000008
 8000e28:	20000000 	.word	0x20000000
 8000e2c:	20000004 	.word	0x20000004

08000e30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e34:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <HAL_IncTick+0x1c>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <HAL_IncTick+0x20>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	4a03      	ldr	r2, [pc, #12]	; (8000e4c <HAL_IncTick+0x1c>)
 8000e40:	6013      	str	r3, [r2, #0]
}
 8000e42:	bf00      	nop
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	20000038 	.word	0x20000038
 8000e50:	20000008 	.word	0x20000008

08000e54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  return uwTick;
 8000e58:	4b03      	ldr	r3, [pc, #12]	; (8000e68 <HAL_GetTick+0x14>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	20000038 	.word	0x20000038

08000e6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e74:	f7ff ffee 	bl	8000e54 <HAL_GetTick>
 8000e78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e84:	d004      	beq.n	8000e90 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e86:	4b09      	ldr	r3, [pc, #36]	; (8000eac <HAL_Delay+0x40>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	68fa      	ldr	r2, [r7, #12]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e90:	bf00      	nop
 8000e92:	f7ff ffdf 	bl	8000e54 <HAL_GetTick>
 8000e96:	4602      	mov	r2, r0
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	1ad3      	subs	r3, r2, r3
 8000e9c:	68fa      	ldr	r2, [r7, #12]
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	d8f7      	bhi.n	8000e92 <HAL_Delay+0x26>
  {
  }
}
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000008 	.word	0x20000008

08000eb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ec6:	68ba      	ldr	r2, [r7, #8]
 8000ec8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ecc:	4013      	ands	r3, r2
 8000ece:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ee2:	4a04      	ldr	r2, [pc, #16]	; (8000ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	60d3      	str	r3, [r2, #12]
}
 8000ee8:	bf00      	nop
 8000eea:	3714      	adds	r7, #20
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000efc:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <__NVIC_GetPriorityGrouping+0x18>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	0a1b      	lsrs	r3, r3, #8
 8000f02:	f003 0307 	and.w	r3, r3, #7
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	6039      	str	r1, [r7, #0]
 8000f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	db0a      	blt.n	8000f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	490c      	ldr	r1, [pc, #48]	; (8000f60 <__NVIC_SetPriority+0x4c>)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	0112      	lsls	r2, r2, #4
 8000f34:	b2d2      	uxtb	r2, r2
 8000f36:	440b      	add	r3, r1
 8000f38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f3c:	e00a      	b.n	8000f54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4908      	ldr	r1, [pc, #32]	; (8000f64 <__NVIC_SetPriority+0x50>)
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	f003 030f 	and.w	r3, r3, #15
 8000f4a:	3b04      	subs	r3, #4
 8000f4c:	0112      	lsls	r2, r2, #4
 8000f4e:	b2d2      	uxtb	r2, r2
 8000f50:	440b      	add	r3, r1
 8000f52:	761a      	strb	r2, [r3, #24]
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000e100 	.word	0xe000e100
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b089      	sub	sp, #36	; 0x24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	f003 0307 	and.w	r3, r3, #7
 8000f7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	f1c3 0307 	rsb	r3, r3, #7
 8000f82:	2b04      	cmp	r3, #4
 8000f84:	bf28      	it	cs
 8000f86:	2304      	movcs	r3, #4
 8000f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3304      	adds	r3, #4
 8000f8e:	2b06      	cmp	r3, #6
 8000f90:	d902      	bls.n	8000f98 <NVIC_EncodePriority+0x30>
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	3b03      	subs	r3, #3
 8000f96:	e000      	b.n	8000f9a <NVIC_EncodePriority+0x32>
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43da      	mvns	r2, r3
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	401a      	ands	r2, r3
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fba:	43d9      	mvns	r1, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc0:	4313      	orrs	r3, r2
         );
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3724      	adds	r7, #36	; 0x24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
	...

08000fd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fe0:	d301      	bcc.n	8000fe6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e00f      	b.n	8001006 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <SysTick_Config+0x40>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3b01      	subs	r3, #1
 8000fec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fee:	210f      	movs	r1, #15
 8000ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff4:	f7ff ff8e 	bl	8000f14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff8:	4b05      	ldr	r3, [pc, #20]	; (8001010 <SysTick_Config+0x40>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ffe:	4b04      	ldr	r3, [pc, #16]	; (8001010 <SysTick_Config+0x40>)
 8001000:	2207      	movs	r2, #7
 8001002:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	e000e010 	.word	0xe000e010

08001014 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff ff47 	bl	8000eb0 <__NVIC_SetPriorityGrouping>
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b086      	sub	sp, #24
 800102e:	af00      	add	r7, sp, #0
 8001030:	4603      	mov	r3, r0
 8001032:	60b9      	str	r1, [r7, #8]
 8001034:	607a      	str	r2, [r7, #4]
 8001036:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800103c:	f7ff ff5c 	bl	8000ef8 <__NVIC_GetPriorityGrouping>
 8001040:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	68b9      	ldr	r1, [r7, #8]
 8001046:	6978      	ldr	r0, [r7, #20]
 8001048:	f7ff ff8e 	bl	8000f68 <NVIC_EncodePriority>
 800104c:	4602      	mov	r2, r0
 800104e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001052:	4611      	mov	r1, r2
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff5d 	bl	8000f14 <__NVIC_SetPriority>
}
 800105a:	bf00      	nop
 800105c:	3718      	adds	r7, #24
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f7ff ffb0 	bl	8000fd0 <SysTick_Config>
 8001070:	4603      	mov	r3, r0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800107c:	b480      	push	{r7}
 800107e:	b087      	sub	sp, #28
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800108a:	e154      	b.n	8001336 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	2101      	movs	r1, #1
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	fa01 f303 	lsl.w	r3, r1, r3
 8001098:	4013      	ands	r3, r2
 800109a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	f000 8146 	beq.w	8001330 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d00b      	beq.n	80010c4 <HAL_GPIO_Init+0x48>
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d007      	beq.n	80010c4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010b8:	2b11      	cmp	r3, #17
 80010ba:	d003      	beq.n	80010c4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	2b12      	cmp	r3, #18
 80010c2:	d130      	bne.n	8001126 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	2203      	movs	r2, #3
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4013      	ands	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	68da      	ldr	r2, [r3, #12]
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010fa:	2201      	movs	r2, #1
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43db      	mvns	r3, r3
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	4013      	ands	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	091b      	lsrs	r3, r3, #4
 8001110:	f003 0201 	and.w	r2, r3, #1
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	4313      	orrs	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	2203      	movs	r2, #3
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	43db      	mvns	r3, r3
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	4013      	ands	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	689a      	ldr	r2, [r3, #8]
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4313      	orrs	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	2b02      	cmp	r3, #2
 800115c:	d003      	beq.n	8001166 <HAL_GPIO_Init+0xea>
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	2b12      	cmp	r3, #18
 8001164:	d123      	bne.n	80011ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	08da      	lsrs	r2, r3, #3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	3208      	adds	r2, #8
 800116e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001172:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	220f      	movs	r2, #15
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43db      	mvns	r3, r3
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	4013      	ands	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	691a      	ldr	r2, [r3, #16]
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	f003 0307 	and.w	r3, r3, #7
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	4313      	orrs	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	08da      	lsrs	r2, r3, #3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3208      	adds	r2, #8
 80011a8:	6939      	ldr	r1, [r7, #16]
 80011aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	2203      	movs	r2, #3
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43db      	mvns	r3, r3
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	4013      	ands	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f003 0203 	and.w	r2, r3, #3
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4313      	orrs	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f000 80a0 	beq.w	8001330 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f0:	4b58      	ldr	r3, [pc, #352]	; (8001354 <HAL_GPIO_Init+0x2d8>)
 80011f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011f4:	4a57      	ldr	r2, [pc, #348]	; (8001354 <HAL_GPIO_Init+0x2d8>)
 80011f6:	f043 0301 	orr.w	r3, r3, #1
 80011fa:	6613      	str	r3, [r2, #96]	; 0x60
 80011fc:	4b55      	ldr	r3, [pc, #340]	; (8001354 <HAL_GPIO_Init+0x2d8>)
 80011fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001200:	f003 0301 	and.w	r3, r3, #1
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001208:	4a53      	ldr	r2, [pc, #332]	; (8001358 <HAL_GPIO_Init+0x2dc>)
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	089b      	lsrs	r3, r3, #2
 800120e:	3302      	adds	r3, #2
 8001210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001214:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	f003 0303 	and.w	r3, r3, #3
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	220f      	movs	r2, #15
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	4013      	ands	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001232:	d019      	beq.n	8001268 <HAL_GPIO_Init+0x1ec>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4a49      	ldr	r2, [pc, #292]	; (800135c <HAL_GPIO_Init+0x2e0>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d013      	beq.n	8001264 <HAL_GPIO_Init+0x1e8>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4a48      	ldr	r2, [pc, #288]	; (8001360 <HAL_GPIO_Init+0x2e4>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d00d      	beq.n	8001260 <HAL_GPIO_Init+0x1e4>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4a47      	ldr	r2, [pc, #284]	; (8001364 <HAL_GPIO_Init+0x2e8>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d007      	beq.n	800125c <HAL_GPIO_Init+0x1e0>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a46      	ldr	r2, [pc, #280]	; (8001368 <HAL_GPIO_Init+0x2ec>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d101      	bne.n	8001258 <HAL_GPIO_Init+0x1dc>
 8001254:	2304      	movs	r3, #4
 8001256:	e008      	b.n	800126a <HAL_GPIO_Init+0x1ee>
 8001258:	2307      	movs	r3, #7
 800125a:	e006      	b.n	800126a <HAL_GPIO_Init+0x1ee>
 800125c:	2303      	movs	r3, #3
 800125e:	e004      	b.n	800126a <HAL_GPIO_Init+0x1ee>
 8001260:	2302      	movs	r3, #2
 8001262:	e002      	b.n	800126a <HAL_GPIO_Init+0x1ee>
 8001264:	2301      	movs	r3, #1
 8001266:	e000      	b.n	800126a <HAL_GPIO_Init+0x1ee>
 8001268:	2300      	movs	r3, #0
 800126a:	697a      	ldr	r2, [r7, #20]
 800126c:	f002 0203 	and.w	r2, r2, #3
 8001270:	0092      	lsls	r2, r2, #2
 8001272:	4093      	lsls	r3, r2
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	4313      	orrs	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800127a:	4937      	ldr	r1, [pc, #220]	; (8001358 <HAL_GPIO_Init+0x2dc>)
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	089b      	lsrs	r3, r3, #2
 8001280:	3302      	adds	r3, #2
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001288:	4b38      	ldr	r3, [pc, #224]	; (800136c <HAL_GPIO_Init+0x2f0>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	43db      	mvns	r3, r3
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	4013      	ands	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d003      	beq.n	80012ac <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012ac:	4a2f      	ldr	r2, [pc, #188]	; (800136c <HAL_GPIO_Init+0x2f0>)
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80012b2:	4b2e      	ldr	r3, [pc, #184]	; (800136c <HAL_GPIO_Init+0x2f0>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	43db      	mvns	r3, r3
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	4013      	ands	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012d6:	4a25      	ldr	r2, [pc, #148]	; (800136c <HAL_GPIO_Init+0x2f0>)
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012dc:	4b23      	ldr	r3, [pc, #140]	; (800136c <HAL_GPIO_Init+0x2f0>)
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	43db      	mvns	r3, r3
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	4013      	ands	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d003      	beq.n	8001300 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001300:	4a1a      	ldr	r2, [pc, #104]	; (800136c <HAL_GPIO_Init+0x2f0>)
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001306:	4b19      	ldr	r3, [pc, #100]	; (800136c <HAL_GPIO_Init+0x2f0>)
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	43db      	mvns	r3, r3
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	4013      	ands	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	4313      	orrs	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800132a:	4a10      	ldr	r2, [pc, #64]	; (800136c <HAL_GPIO_Init+0x2f0>)
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	3301      	adds	r3, #1
 8001334:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	fa22 f303 	lsr.w	r3, r2, r3
 8001340:	2b00      	cmp	r3, #0
 8001342:	f47f aea3 	bne.w	800108c <HAL_GPIO_Init+0x10>
  }
}
 8001346:	bf00      	nop
 8001348:	371c      	adds	r7, #28
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	40021000 	.word	0x40021000
 8001358:	40010000 	.word	0x40010000
 800135c:	48000400 	.word	0x48000400
 8001360:	48000800 	.word	0x48000800
 8001364:	48000c00 	.word	0x48000c00
 8001368:	48001000 	.word	0x48001000
 800136c:	40010400 	.word	0x40010400

08001370 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	460b      	mov	r3, r1
 800137a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	691a      	ldr	r2, [r3, #16]
 8001380:	887b      	ldrh	r3, [r7, #2]
 8001382:	4013      	ands	r3, r2
 8001384:	2b00      	cmp	r3, #0
 8001386:	d002      	beq.n	800138e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001388:	2301      	movs	r3, #1
 800138a:	73fb      	strb	r3, [r7, #15]
 800138c:	e001      	b.n	8001392 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800138e:	2300      	movs	r3, #0
 8001390:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001392:	7bfb      	ldrb	r3, [r7, #15]
}
 8001394:	4618      	mov	r0, r3
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	460b      	mov	r3, r1
 80013aa:	807b      	strh	r3, [r7, #2]
 80013ac:	4613      	mov	r3, r2
 80013ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013b0:	787b      	ldrb	r3, [r7, #1]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013b6:	887a      	ldrh	r2, [r7, #2]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013bc:	e002      	b.n	80013c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013be:	887a      	ldrh	r2, [r7, #2]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	460b      	mov	r3, r1
 80013da:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	695a      	ldr	r2, [r3, #20]
 80013e0:	887b      	ldrh	r3, [r7, #2]
 80013e2:	4013      	ands	r3, r2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d003      	beq.n	80013f0 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013e8:	887a      	ldrh	r2, [r7, #2]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80013ee:	e002      	b.n	80013f6 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013f0:	887a      	ldrh	r2, [r7, #2]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	619a      	str	r2, [r3, #24]
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
	...

08001404 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001408:	4b04      	ldr	r3, [pc, #16]	; (800141c <HAL_PWREx_GetVoltageRange+0x18>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001410:	4618      	mov	r0, r3
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	40007000 	.word	0x40007000

08001420 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800142e:	d130      	bne.n	8001492 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001430:	4b23      	ldr	r3, [pc, #140]	; (80014c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800143c:	d038      	beq.n	80014b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800143e:	4b20      	ldr	r3, [pc, #128]	; (80014c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001446:	4a1e      	ldr	r2, [pc, #120]	; (80014c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001448:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800144c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800144e:	4b1d      	ldr	r3, [pc, #116]	; (80014c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2232      	movs	r2, #50	; 0x32
 8001454:	fb02 f303 	mul.w	r3, r2, r3
 8001458:	4a1b      	ldr	r2, [pc, #108]	; (80014c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800145a:	fba2 2303 	umull	r2, r3, r2, r3
 800145e:	0c9b      	lsrs	r3, r3, #18
 8001460:	3301      	adds	r3, #1
 8001462:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001464:	e002      	b.n	800146c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	3b01      	subs	r3, #1
 800146a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800146c:	4b14      	ldr	r3, [pc, #80]	; (80014c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800146e:	695b      	ldr	r3, [r3, #20]
 8001470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001474:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001478:	d102      	bne.n	8001480 <HAL_PWREx_ControlVoltageScaling+0x60>
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d1f2      	bne.n	8001466 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001480:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001482:	695b      	ldr	r3, [r3, #20]
 8001484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001488:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800148c:	d110      	bne.n	80014b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e00f      	b.n	80014b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001492:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800149a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800149e:	d007      	beq.n	80014b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014a0:	4b07      	ldr	r3, [pc, #28]	; (80014c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014a8:	4a05      	ldr	r2, [pc, #20]	; (80014c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3714      	adds	r7, #20
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	40007000 	.word	0x40007000
 80014c4:	20000000 	.word	0x20000000
 80014c8:	431bde83 	.word	0x431bde83

080014cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b088      	sub	sp, #32
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d102      	bne.n	80014e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	f000 bc11 	b.w	8001d02 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014e0:	4ba0      	ldr	r3, [pc, #640]	; (8001764 <HAL_RCC_OscConfig+0x298>)
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	f003 030c 	and.w	r3, r3, #12
 80014e8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014ea:	4b9e      	ldr	r3, [pc, #632]	; (8001764 <HAL_RCC_OscConfig+0x298>)
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	f003 0303 	and.w	r3, r3, #3
 80014f2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0310 	and.w	r3, r3, #16
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	f000 80e4 	beq.w	80016ca <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d007      	beq.n	8001518 <HAL_RCC_OscConfig+0x4c>
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	2b0c      	cmp	r3, #12
 800150c:	f040 808b 	bne.w	8001626 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	2b01      	cmp	r3, #1
 8001514:	f040 8087 	bne.w	8001626 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001518:	4b92      	ldr	r3, [pc, #584]	; (8001764 <HAL_RCC_OscConfig+0x298>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d005      	beq.n	8001530 <HAL_RCC_OscConfig+0x64>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d101      	bne.n	8001530 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e3e8      	b.n	8001d02 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6a1a      	ldr	r2, [r3, #32]
 8001534:	4b8b      	ldr	r3, [pc, #556]	; (8001764 <HAL_RCC_OscConfig+0x298>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0308 	and.w	r3, r3, #8
 800153c:	2b00      	cmp	r3, #0
 800153e:	d004      	beq.n	800154a <HAL_RCC_OscConfig+0x7e>
 8001540:	4b88      	ldr	r3, [pc, #544]	; (8001764 <HAL_RCC_OscConfig+0x298>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001548:	e005      	b.n	8001556 <HAL_RCC_OscConfig+0x8a>
 800154a:	4b86      	ldr	r3, [pc, #536]	; (8001764 <HAL_RCC_OscConfig+0x298>)
 800154c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001550:	091b      	lsrs	r3, r3, #4
 8001552:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001556:	4293      	cmp	r3, r2
 8001558:	d223      	bcs.n	80015a2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a1b      	ldr	r3, [r3, #32]
 800155e:	4618      	mov	r0, r3
 8001560:	f000 fd40 	bl	8001fe4 <RCC_SetFlashLatencyFromMSIRange>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e3c9      	b.n	8001d02 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800156e:	4b7d      	ldr	r3, [pc, #500]	; (8001764 <HAL_RCC_OscConfig+0x298>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a7c      	ldr	r2, [pc, #496]	; (8001764 <HAL_RCC_OscConfig+0x298>)
 8001574:	f043 0308 	orr.w	r3, r3, #8
 8001578:	6013      	str	r3, [r2, #0]
 800157a:	4b7a      	ldr	r3, [pc, #488]	; (8001764 <HAL_RCC_OscConfig+0x298>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a1b      	ldr	r3, [r3, #32]
 8001586:	4977      	ldr	r1, [pc, #476]	; (8001764 <HAL_RCC_OscConfig+0x298>)
 8001588:	4313      	orrs	r3, r2
 800158a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800158c:	4b75      	ldr	r3, [pc, #468]	; (8001764 <HAL_RCC_OscConfig+0x298>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	69db      	ldr	r3, [r3, #28]
 8001598:	021b      	lsls	r3, r3, #8
 800159a:	4972      	ldr	r1, [pc, #456]	; (8001764 <HAL_RCC_OscConfig+0x298>)
 800159c:	4313      	orrs	r3, r2
 800159e:	604b      	str	r3, [r1, #4]
 80015a0:	e025      	b.n	80015ee <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015a2:	4b70      	ldr	r3, [pc, #448]	; (8001764 <HAL_RCC_OscConfig+0x298>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a6f      	ldr	r2, [pc, #444]	; (8001764 <HAL_RCC_OscConfig+0x298>)
 80015a8:	f043 0308 	orr.w	r3, r3, #8
 80015ac:	6013      	str	r3, [r2, #0]
 80015ae:	4b6d      	ldr	r3, [pc, #436]	; (8001764 <HAL_RCC_OscConfig+0x298>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a1b      	ldr	r3, [r3, #32]
 80015ba:	496a      	ldr	r1, [pc, #424]	; (8001764 <HAL_RCC_OscConfig+0x298>)
 80015bc:	4313      	orrs	r3, r2
 80015be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015c0:	4b68      	ldr	r3, [pc, #416]	; (8001764 <HAL_RCC_OscConfig+0x298>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	69db      	ldr	r3, [r3, #28]
 80015cc:	021b      	lsls	r3, r3, #8
 80015ce:	4965      	ldr	r1, [pc, #404]	; (8001764 <HAL_RCC_OscConfig+0x298>)
 80015d0:	4313      	orrs	r3, r2
 80015d2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d109      	bne.n	80015ee <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a1b      	ldr	r3, [r3, #32]
 80015de:	4618      	mov	r0, r3
 80015e0:	f000 fd00 	bl	8001fe4 <RCC_SetFlashLatencyFromMSIRange>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e389      	b.n	8001d02 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015ee:	f000 fc6f 	bl	8001ed0 <HAL_RCC_GetSysClockFreq>
 80015f2:	4601      	mov	r1, r0
 80015f4:	4b5b      	ldr	r3, [pc, #364]	; (8001764 <HAL_RCC_OscConfig+0x298>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	091b      	lsrs	r3, r3, #4
 80015fa:	f003 030f 	and.w	r3, r3, #15
 80015fe:	4a5a      	ldr	r2, [pc, #360]	; (8001768 <HAL_RCC_OscConfig+0x29c>)
 8001600:	5cd3      	ldrb	r3, [r2, r3]
 8001602:	f003 031f 	and.w	r3, r3, #31
 8001606:	fa21 f303 	lsr.w	r3, r1, r3
 800160a:	4a58      	ldr	r2, [pc, #352]	; (800176c <HAL_RCC_OscConfig+0x2a0>)
 800160c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800160e:	4b58      	ldr	r3, [pc, #352]	; (8001770 <HAL_RCC_OscConfig+0x2a4>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff fbd2 	bl	8000dbc <HAL_InitTick>
 8001618:	4603      	mov	r3, r0
 800161a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d052      	beq.n	80016c8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	e36d      	b.n	8001d02 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d032      	beq.n	8001694 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800162e:	4b4d      	ldr	r3, [pc, #308]	; (8001764 <HAL_RCC_OscConfig+0x298>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a4c      	ldr	r2, [pc, #304]	; (8001764 <HAL_RCC_OscConfig+0x298>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800163a:	f7ff fc0b 	bl	8000e54 <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001640:	e008      	b.n	8001654 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001642:	f7ff fc07 	bl	8000e54 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d901      	bls.n	8001654 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e356      	b.n	8001d02 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001654:	4b43      	ldr	r3, [pc, #268]	; (8001764 <HAL_RCC_OscConfig+0x298>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d0f0      	beq.n	8001642 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001660:	4b40      	ldr	r3, [pc, #256]	; (8001764 <HAL_RCC_OscConfig+0x298>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a3f      	ldr	r2, [pc, #252]	; (8001764 <HAL_RCC_OscConfig+0x298>)
 8001666:	f043 0308 	orr.w	r3, r3, #8
 800166a:	6013      	str	r3, [r2, #0]
 800166c:	4b3d      	ldr	r3, [pc, #244]	; (8001764 <HAL_RCC_OscConfig+0x298>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	493a      	ldr	r1, [pc, #232]	; (8001764 <HAL_RCC_OscConfig+0x298>)
 800167a:	4313      	orrs	r3, r2
 800167c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800167e:	4b39      	ldr	r3, [pc, #228]	; (8001764 <HAL_RCC_OscConfig+0x298>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	69db      	ldr	r3, [r3, #28]
 800168a:	021b      	lsls	r3, r3, #8
 800168c:	4935      	ldr	r1, [pc, #212]	; (8001764 <HAL_RCC_OscConfig+0x298>)
 800168e:	4313      	orrs	r3, r2
 8001690:	604b      	str	r3, [r1, #4]
 8001692:	e01a      	b.n	80016ca <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001694:	4b33      	ldr	r3, [pc, #204]	; (8001764 <HAL_RCC_OscConfig+0x298>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a32      	ldr	r2, [pc, #200]	; (8001764 <HAL_RCC_OscConfig+0x298>)
 800169a:	f023 0301 	bic.w	r3, r3, #1
 800169e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016a0:	f7ff fbd8 	bl	8000e54 <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016a8:	f7ff fbd4 	bl	8000e54 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e323      	b.n	8001d02 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016ba:	4b2a      	ldr	r3, [pc, #168]	; (8001764 <HAL_RCC_OscConfig+0x298>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1f0      	bne.n	80016a8 <HAL_RCC_OscConfig+0x1dc>
 80016c6:	e000      	b.n	80016ca <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016c8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d073      	beq.n	80017be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	2b08      	cmp	r3, #8
 80016da:	d005      	beq.n	80016e8 <HAL_RCC_OscConfig+0x21c>
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	2b0c      	cmp	r3, #12
 80016e0:	d10e      	bne.n	8001700 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	2b03      	cmp	r3, #3
 80016e6:	d10b      	bne.n	8001700 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e8:	4b1e      	ldr	r3, [pc, #120]	; (8001764 <HAL_RCC_OscConfig+0x298>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d063      	beq.n	80017bc <HAL_RCC_OscConfig+0x2f0>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d15f      	bne.n	80017bc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e300      	b.n	8001d02 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001708:	d106      	bne.n	8001718 <HAL_RCC_OscConfig+0x24c>
 800170a:	4b16      	ldr	r3, [pc, #88]	; (8001764 <HAL_RCC_OscConfig+0x298>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a15      	ldr	r2, [pc, #84]	; (8001764 <HAL_RCC_OscConfig+0x298>)
 8001710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001714:	6013      	str	r3, [r2, #0]
 8001716:	e01d      	b.n	8001754 <HAL_RCC_OscConfig+0x288>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001720:	d10c      	bne.n	800173c <HAL_RCC_OscConfig+0x270>
 8001722:	4b10      	ldr	r3, [pc, #64]	; (8001764 <HAL_RCC_OscConfig+0x298>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a0f      	ldr	r2, [pc, #60]	; (8001764 <HAL_RCC_OscConfig+0x298>)
 8001728:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	4b0d      	ldr	r3, [pc, #52]	; (8001764 <HAL_RCC_OscConfig+0x298>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a0c      	ldr	r2, [pc, #48]	; (8001764 <HAL_RCC_OscConfig+0x298>)
 8001734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001738:	6013      	str	r3, [r2, #0]
 800173a:	e00b      	b.n	8001754 <HAL_RCC_OscConfig+0x288>
 800173c:	4b09      	ldr	r3, [pc, #36]	; (8001764 <HAL_RCC_OscConfig+0x298>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a08      	ldr	r2, [pc, #32]	; (8001764 <HAL_RCC_OscConfig+0x298>)
 8001742:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001746:	6013      	str	r3, [r2, #0]
 8001748:	4b06      	ldr	r3, [pc, #24]	; (8001764 <HAL_RCC_OscConfig+0x298>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a05      	ldr	r2, [pc, #20]	; (8001764 <HAL_RCC_OscConfig+0x298>)
 800174e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001752:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d01b      	beq.n	8001794 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800175c:	f7ff fb7a 	bl	8000e54 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001762:	e010      	b.n	8001786 <HAL_RCC_OscConfig+0x2ba>
 8001764:	40021000 	.word	0x40021000
 8001768:	08002114 	.word	0x08002114
 800176c:	20000000 	.word	0x20000000
 8001770:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001774:	f7ff fb6e 	bl	8000e54 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b64      	cmp	r3, #100	; 0x64
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e2bd      	b.n	8001d02 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001786:	4baf      	ldr	r3, [pc, #700]	; (8001a44 <HAL_RCC_OscConfig+0x578>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d0f0      	beq.n	8001774 <HAL_RCC_OscConfig+0x2a8>
 8001792:	e014      	b.n	80017be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001794:	f7ff fb5e 	bl	8000e54 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800179c:	f7ff fb5a 	bl	8000e54 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b64      	cmp	r3, #100	; 0x64
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e2a9      	b.n	8001d02 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017ae:	4ba5      	ldr	r3, [pc, #660]	; (8001a44 <HAL_RCC_OscConfig+0x578>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1f0      	bne.n	800179c <HAL_RCC_OscConfig+0x2d0>
 80017ba:	e000      	b.n	80017be <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d060      	beq.n	800188c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	2b04      	cmp	r3, #4
 80017ce:	d005      	beq.n	80017dc <HAL_RCC_OscConfig+0x310>
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	2b0c      	cmp	r3, #12
 80017d4:	d119      	bne.n	800180a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d116      	bne.n	800180a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017dc:	4b99      	ldr	r3, [pc, #612]	; (8001a44 <HAL_RCC_OscConfig+0x578>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d005      	beq.n	80017f4 <HAL_RCC_OscConfig+0x328>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d101      	bne.n	80017f4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e286      	b.n	8001d02 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f4:	4b93      	ldr	r3, [pc, #588]	; (8001a44 <HAL_RCC_OscConfig+0x578>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	691b      	ldr	r3, [r3, #16]
 8001800:	061b      	lsls	r3, r3, #24
 8001802:	4990      	ldr	r1, [pc, #576]	; (8001a44 <HAL_RCC_OscConfig+0x578>)
 8001804:	4313      	orrs	r3, r2
 8001806:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001808:	e040      	b.n	800188c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d023      	beq.n	800185a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001812:	4b8c      	ldr	r3, [pc, #560]	; (8001a44 <HAL_RCC_OscConfig+0x578>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a8b      	ldr	r2, [pc, #556]	; (8001a44 <HAL_RCC_OscConfig+0x578>)
 8001818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800181c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181e:	f7ff fb19 	bl	8000e54 <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001826:	f7ff fb15 	bl	8000e54 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e264      	b.n	8001d02 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001838:	4b82      	ldr	r3, [pc, #520]	; (8001a44 <HAL_RCC_OscConfig+0x578>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0f0      	beq.n	8001826 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001844:	4b7f      	ldr	r3, [pc, #508]	; (8001a44 <HAL_RCC_OscConfig+0x578>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	061b      	lsls	r3, r3, #24
 8001852:	497c      	ldr	r1, [pc, #496]	; (8001a44 <HAL_RCC_OscConfig+0x578>)
 8001854:	4313      	orrs	r3, r2
 8001856:	604b      	str	r3, [r1, #4]
 8001858:	e018      	b.n	800188c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800185a:	4b7a      	ldr	r3, [pc, #488]	; (8001a44 <HAL_RCC_OscConfig+0x578>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a79      	ldr	r2, [pc, #484]	; (8001a44 <HAL_RCC_OscConfig+0x578>)
 8001860:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001864:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001866:	f7ff faf5 	bl	8000e54 <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800186c:	e008      	b.n	8001880 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800186e:	f7ff faf1 	bl	8000e54 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e240      	b.n	8001d02 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001880:	4b70      	ldr	r3, [pc, #448]	; (8001a44 <HAL_RCC_OscConfig+0x578>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1f0      	bne.n	800186e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0308 	and.w	r3, r3, #8
 8001894:	2b00      	cmp	r3, #0
 8001896:	d03c      	beq.n	8001912 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	695b      	ldr	r3, [r3, #20]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d01c      	beq.n	80018da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018a0:	4b68      	ldr	r3, [pc, #416]	; (8001a44 <HAL_RCC_OscConfig+0x578>)
 80018a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018a6:	4a67      	ldr	r2, [pc, #412]	; (8001a44 <HAL_RCC_OscConfig+0x578>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b0:	f7ff fad0 	bl	8000e54 <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018b8:	f7ff facc 	bl	8000e54 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e21b      	b.n	8001d02 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018ca:	4b5e      	ldr	r3, [pc, #376]	; (8001a44 <HAL_RCC_OscConfig+0x578>)
 80018cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d0ef      	beq.n	80018b8 <HAL_RCC_OscConfig+0x3ec>
 80018d8:	e01b      	b.n	8001912 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018da:	4b5a      	ldr	r3, [pc, #360]	; (8001a44 <HAL_RCC_OscConfig+0x578>)
 80018dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018e0:	4a58      	ldr	r2, [pc, #352]	; (8001a44 <HAL_RCC_OscConfig+0x578>)
 80018e2:	f023 0301 	bic.w	r3, r3, #1
 80018e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ea:	f7ff fab3 	bl	8000e54 <HAL_GetTick>
 80018ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018f2:	f7ff faaf 	bl	8000e54 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e1fe      	b.n	8001d02 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001904:	4b4f      	ldr	r3, [pc, #316]	; (8001a44 <HAL_RCC_OscConfig+0x578>)
 8001906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1ef      	bne.n	80018f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0304 	and.w	r3, r3, #4
 800191a:	2b00      	cmp	r3, #0
 800191c:	f000 80a6 	beq.w	8001a6c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001920:	2300      	movs	r3, #0
 8001922:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001924:	4b47      	ldr	r3, [pc, #284]	; (8001a44 <HAL_RCC_OscConfig+0x578>)
 8001926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d10d      	bne.n	800194c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001930:	4b44      	ldr	r3, [pc, #272]	; (8001a44 <HAL_RCC_OscConfig+0x578>)
 8001932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001934:	4a43      	ldr	r2, [pc, #268]	; (8001a44 <HAL_RCC_OscConfig+0x578>)
 8001936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800193a:	6593      	str	r3, [r2, #88]	; 0x58
 800193c:	4b41      	ldr	r3, [pc, #260]	; (8001a44 <HAL_RCC_OscConfig+0x578>)
 800193e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001944:	60bb      	str	r3, [r7, #8]
 8001946:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001948:	2301      	movs	r3, #1
 800194a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800194c:	4b3e      	ldr	r3, [pc, #248]	; (8001a48 <HAL_RCC_OscConfig+0x57c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001954:	2b00      	cmp	r3, #0
 8001956:	d118      	bne.n	800198a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001958:	4b3b      	ldr	r3, [pc, #236]	; (8001a48 <HAL_RCC_OscConfig+0x57c>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a3a      	ldr	r2, [pc, #232]	; (8001a48 <HAL_RCC_OscConfig+0x57c>)
 800195e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001962:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001964:	f7ff fa76 	bl	8000e54 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800196c:	f7ff fa72 	bl	8000e54 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e1c1      	b.n	8001d02 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800197e:	4b32      	ldr	r3, [pc, #200]	; (8001a48 <HAL_RCC_OscConfig+0x57c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001986:	2b00      	cmp	r3, #0
 8001988:	d0f0      	beq.n	800196c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d108      	bne.n	80019a4 <HAL_RCC_OscConfig+0x4d8>
 8001992:	4b2c      	ldr	r3, [pc, #176]	; (8001a44 <HAL_RCC_OscConfig+0x578>)
 8001994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001998:	4a2a      	ldr	r2, [pc, #168]	; (8001a44 <HAL_RCC_OscConfig+0x578>)
 800199a:	f043 0301 	orr.w	r3, r3, #1
 800199e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019a2:	e024      	b.n	80019ee <HAL_RCC_OscConfig+0x522>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	2b05      	cmp	r3, #5
 80019aa:	d110      	bne.n	80019ce <HAL_RCC_OscConfig+0x502>
 80019ac:	4b25      	ldr	r3, [pc, #148]	; (8001a44 <HAL_RCC_OscConfig+0x578>)
 80019ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019b2:	4a24      	ldr	r2, [pc, #144]	; (8001a44 <HAL_RCC_OscConfig+0x578>)
 80019b4:	f043 0304 	orr.w	r3, r3, #4
 80019b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019bc:	4b21      	ldr	r3, [pc, #132]	; (8001a44 <HAL_RCC_OscConfig+0x578>)
 80019be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019c2:	4a20      	ldr	r2, [pc, #128]	; (8001a44 <HAL_RCC_OscConfig+0x578>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019cc:	e00f      	b.n	80019ee <HAL_RCC_OscConfig+0x522>
 80019ce:	4b1d      	ldr	r3, [pc, #116]	; (8001a44 <HAL_RCC_OscConfig+0x578>)
 80019d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019d4:	4a1b      	ldr	r2, [pc, #108]	; (8001a44 <HAL_RCC_OscConfig+0x578>)
 80019d6:	f023 0301 	bic.w	r3, r3, #1
 80019da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019de:	4b19      	ldr	r3, [pc, #100]	; (8001a44 <HAL_RCC_OscConfig+0x578>)
 80019e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019e4:	4a17      	ldr	r2, [pc, #92]	; (8001a44 <HAL_RCC_OscConfig+0x578>)
 80019e6:	f023 0304 	bic.w	r3, r3, #4
 80019ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d016      	beq.n	8001a24 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f6:	f7ff fa2d 	bl	8000e54 <HAL_GetTick>
 80019fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019fc:	e00a      	b.n	8001a14 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019fe:	f7ff fa29 	bl	8000e54 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e176      	b.n	8001d02 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <HAL_RCC_OscConfig+0x578>)
 8001a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d0ed      	beq.n	80019fe <HAL_RCC_OscConfig+0x532>
 8001a22:	e01a      	b.n	8001a5a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a24:	f7ff fa16 	bl	8000e54 <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a2a:	e00f      	b.n	8001a4c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a2c:	f7ff fa12 	bl	8000e54 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d906      	bls.n	8001a4c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e15f      	b.n	8001d02 <HAL_RCC_OscConfig+0x836>
 8001a42:	bf00      	nop
 8001a44:	40021000 	.word	0x40021000
 8001a48:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a4c:	4baa      	ldr	r3, [pc, #680]	; (8001cf8 <HAL_RCC_OscConfig+0x82c>)
 8001a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1e8      	bne.n	8001a2c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a5a:	7ffb      	ldrb	r3, [r7, #31]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d105      	bne.n	8001a6c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a60:	4ba5      	ldr	r3, [pc, #660]	; (8001cf8 <HAL_RCC_OscConfig+0x82c>)
 8001a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a64:	4aa4      	ldr	r2, [pc, #656]	; (8001cf8 <HAL_RCC_OscConfig+0x82c>)
 8001a66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a6a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0320 	and.w	r3, r3, #32
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d03c      	beq.n	8001af2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d01c      	beq.n	8001aba <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a80:	4b9d      	ldr	r3, [pc, #628]	; (8001cf8 <HAL_RCC_OscConfig+0x82c>)
 8001a82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a86:	4a9c      	ldr	r2, [pc, #624]	; (8001cf8 <HAL_RCC_OscConfig+0x82c>)
 8001a88:	f043 0301 	orr.w	r3, r3, #1
 8001a8c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a90:	f7ff f9e0 	bl	8000e54 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a98:	f7ff f9dc 	bl	8000e54 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e12b      	b.n	8001d02 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001aaa:	4b93      	ldr	r3, [pc, #588]	; (8001cf8 <HAL_RCC_OscConfig+0x82c>)
 8001aac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0ef      	beq.n	8001a98 <HAL_RCC_OscConfig+0x5cc>
 8001ab8:	e01b      	b.n	8001af2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001aba:	4b8f      	ldr	r3, [pc, #572]	; (8001cf8 <HAL_RCC_OscConfig+0x82c>)
 8001abc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ac0:	4a8d      	ldr	r2, [pc, #564]	; (8001cf8 <HAL_RCC_OscConfig+0x82c>)
 8001ac2:	f023 0301 	bic.w	r3, r3, #1
 8001ac6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aca:	f7ff f9c3 	bl	8000e54 <HAL_GetTick>
 8001ace:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ad0:	e008      	b.n	8001ae4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ad2:	f7ff f9bf 	bl	8000e54 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e10e      	b.n	8001d02 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ae4:	4b84      	ldr	r3, [pc, #528]	; (8001cf8 <HAL_RCC_OscConfig+0x82c>)
 8001ae6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1ef      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f000 8102 	beq.w	8001d00 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	f040 80c5 	bne.w	8001c90 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b06:	4b7c      	ldr	r3, [pc, #496]	; (8001cf8 <HAL_RCC_OscConfig+0x82c>)
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	f003 0203 	and.w	r2, r3, #3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d12c      	bne.n	8001b74 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b24:	3b01      	subs	r3, #1
 8001b26:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d123      	bne.n	8001b74 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b36:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d11b      	bne.n	8001b74 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b46:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d113      	bne.n	8001b74 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b56:	085b      	lsrs	r3, r3, #1
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d109      	bne.n	8001b74 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	085b      	lsrs	r3, r3, #1
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d067      	beq.n	8001c44 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	2b0c      	cmp	r3, #12
 8001b78:	d062      	beq.n	8001c40 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b7a:	4b5f      	ldr	r3, [pc, #380]	; (8001cf8 <HAL_RCC_OscConfig+0x82c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e0bb      	b.n	8001d02 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b8a:	4b5b      	ldr	r3, [pc, #364]	; (8001cf8 <HAL_RCC_OscConfig+0x82c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a5a      	ldr	r2, [pc, #360]	; (8001cf8 <HAL_RCC_OscConfig+0x82c>)
 8001b90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b94:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b96:	f7ff f95d 	bl	8000e54 <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b9e:	f7ff f959 	bl	8000e54 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e0a8      	b.n	8001d02 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bb0:	4b51      	ldr	r3, [pc, #324]	; (8001cf8 <HAL_RCC_OscConfig+0x82c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1f0      	bne.n	8001b9e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bbc:	4b4e      	ldr	r3, [pc, #312]	; (8001cf8 <HAL_RCC_OscConfig+0x82c>)
 8001bbe:	68da      	ldr	r2, [r3, #12]
 8001bc0:	4b4e      	ldr	r3, [pc, #312]	; (8001cfc <HAL_RCC_OscConfig+0x830>)
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001bcc:	3a01      	subs	r2, #1
 8001bce:	0112      	lsls	r2, r2, #4
 8001bd0:	4311      	orrs	r1, r2
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001bd6:	0212      	lsls	r2, r2, #8
 8001bd8:	4311      	orrs	r1, r2
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001bde:	0852      	lsrs	r2, r2, #1
 8001be0:	3a01      	subs	r2, #1
 8001be2:	0552      	lsls	r2, r2, #21
 8001be4:	4311      	orrs	r1, r2
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001bea:	0852      	lsrs	r2, r2, #1
 8001bec:	3a01      	subs	r2, #1
 8001bee:	0652      	lsls	r2, r2, #25
 8001bf0:	4311      	orrs	r1, r2
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001bf6:	06d2      	lsls	r2, r2, #27
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	493f      	ldr	r1, [pc, #252]	; (8001cf8 <HAL_RCC_OscConfig+0x82c>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c00:	4b3d      	ldr	r3, [pc, #244]	; (8001cf8 <HAL_RCC_OscConfig+0x82c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a3c      	ldr	r2, [pc, #240]	; (8001cf8 <HAL_RCC_OscConfig+0x82c>)
 8001c06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c0a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c0c:	4b3a      	ldr	r3, [pc, #232]	; (8001cf8 <HAL_RCC_OscConfig+0x82c>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	4a39      	ldr	r2, [pc, #228]	; (8001cf8 <HAL_RCC_OscConfig+0x82c>)
 8001c12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c16:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c18:	f7ff f91c 	bl	8000e54 <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c20:	f7ff f918 	bl	8000e54 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e067      	b.n	8001d02 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c32:	4b31      	ldr	r3, [pc, #196]	; (8001cf8 <HAL_RCC_OscConfig+0x82c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d0f0      	beq.n	8001c20 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c3e:	e05f      	b.n	8001d00 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e05e      	b.n	8001d02 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c44:	4b2c      	ldr	r3, [pc, #176]	; (8001cf8 <HAL_RCC_OscConfig+0x82c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d157      	bne.n	8001d00 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c50:	4b29      	ldr	r3, [pc, #164]	; (8001cf8 <HAL_RCC_OscConfig+0x82c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a28      	ldr	r2, [pc, #160]	; (8001cf8 <HAL_RCC_OscConfig+0x82c>)
 8001c56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c5a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c5c:	4b26      	ldr	r3, [pc, #152]	; (8001cf8 <HAL_RCC_OscConfig+0x82c>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	4a25      	ldr	r2, [pc, #148]	; (8001cf8 <HAL_RCC_OscConfig+0x82c>)
 8001c62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c66:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c68:	f7ff f8f4 	bl	8000e54 <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c70:	f7ff f8f0 	bl	8000e54 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e03f      	b.n	8001d02 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c82:	4b1d      	ldr	r3, [pc, #116]	; (8001cf8 <HAL_RCC_OscConfig+0x82c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d0f0      	beq.n	8001c70 <HAL_RCC_OscConfig+0x7a4>
 8001c8e:	e037      	b.n	8001d00 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	2b0c      	cmp	r3, #12
 8001c94:	d02d      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c96:	4b18      	ldr	r3, [pc, #96]	; (8001cf8 <HAL_RCC_OscConfig+0x82c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a17      	ldr	r2, [pc, #92]	; (8001cf8 <HAL_RCC_OscConfig+0x82c>)
 8001c9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ca0:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001ca2:	4b15      	ldr	r3, [pc, #84]	; (8001cf8 <HAL_RCC_OscConfig+0x82c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d105      	bne.n	8001cba <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001cae:	4b12      	ldr	r3, [pc, #72]	; (8001cf8 <HAL_RCC_OscConfig+0x82c>)
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	4a11      	ldr	r2, [pc, #68]	; (8001cf8 <HAL_RCC_OscConfig+0x82c>)
 8001cb4:	f023 0303 	bic.w	r3, r3, #3
 8001cb8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001cba:	4b0f      	ldr	r3, [pc, #60]	; (8001cf8 <HAL_RCC_OscConfig+0x82c>)
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	4a0e      	ldr	r2, [pc, #56]	; (8001cf8 <HAL_RCC_OscConfig+0x82c>)
 8001cc0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001cc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cc8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cca:	f7ff f8c3 	bl	8000e54 <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd2:	f7ff f8bf 	bl	8000e54 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e00e      	b.n	8001d02 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ce4:	4b04      	ldr	r3, [pc, #16]	; (8001cf8 <HAL_RCC_OscConfig+0x82c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1f0      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x806>
 8001cf0:	e006      	b.n	8001d00 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e005      	b.n	8001d02 <HAL_RCC_OscConfig+0x836>
 8001cf6:	bf00      	nop
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3720      	adds	r7, #32
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop

08001d0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d101      	bne.n	8001d20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e0c8      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d20:	4b66      	ldr	r3, [pc, #408]	; (8001ebc <HAL_RCC_ClockConfig+0x1b0>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d910      	bls.n	8001d50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2e:	4b63      	ldr	r3, [pc, #396]	; (8001ebc <HAL_RCC_ClockConfig+0x1b0>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f023 0207 	bic.w	r2, r3, #7
 8001d36:	4961      	ldr	r1, [pc, #388]	; (8001ebc <HAL_RCC_ClockConfig+0x1b0>)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d3e:	4b5f      	ldr	r3, [pc, #380]	; (8001ebc <HAL_RCC_ClockConfig+0x1b0>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d001      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e0b0      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d04c      	beq.n	8001df6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	2b03      	cmp	r3, #3
 8001d62:	d107      	bne.n	8001d74 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d64:	4b56      	ldr	r3, [pc, #344]	; (8001ec0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d121      	bne.n	8001db4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e09e      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d107      	bne.n	8001d8c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d7c:	4b50      	ldr	r3, [pc, #320]	; (8001ec0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d115      	bne.n	8001db4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e092      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d107      	bne.n	8001da4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d94:	4b4a      	ldr	r3, [pc, #296]	; (8001ec0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d109      	bne.n	8001db4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e086      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001da4:	4b46      	ldr	r3, [pc, #280]	; (8001ec0 <HAL_RCC_ClockConfig+0x1b4>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d101      	bne.n	8001db4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e07e      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001db4:	4b42      	ldr	r3, [pc, #264]	; (8001ec0 <HAL_RCC_ClockConfig+0x1b4>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f023 0203 	bic.w	r2, r3, #3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	493f      	ldr	r1, [pc, #252]	; (8001ec0 <HAL_RCC_ClockConfig+0x1b4>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dc6:	f7ff f845 	bl	8000e54 <HAL_GetTick>
 8001dca:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dcc:	e00a      	b.n	8001de4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dce:	f7ff f841 	bl	8000e54 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e066      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001de4:	4b36      	ldr	r3, [pc, #216]	; (8001ec0 <HAL_RCC_ClockConfig+0x1b4>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f003 020c 	and.w	r2, r3, #12
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d1eb      	bne.n	8001dce <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d008      	beq.n	8001e14 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e02:	4b2f      	ldr	r3, [pc, #188]	; (8001ec0 <HAL_RCC_ClockConfig+0x1b4>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	492c      	ldr	r1, [pc, #176]	; (8001ec0 <HAL_RCC_ClockConfig+0x1b4>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e14:	4b29      	ldr	r3, [pc, #164]	; (8001ebc <HAL_RCC_ClockConfig+0x1b0>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0307 	and.w	r3, r3, #7
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d210      	bcs.n	8001e44 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e22:	4b26      	ldr	r3, [pc, #152]	; (8001ebc <HAL_RCC_ClockConfig+0x1b0>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f023 0207 	bic.w	r2, r3, #7
 8001e2a:	4924      	ldr	r1, [pc, #144]	; (8001ebc <HAL_RCC_ClockConfig+0x1b0>)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e32:	4b22      	ldr	r3, [pc, #136]	; (8001ebc <HAL_RCC_ClockConfig+0x1b0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d001      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e036      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0304 	and.w	r3, r3, #4
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d008      	beq.n	8001e62 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e50:	4b1b      	ldr	r3, [pc, #108]	; (8001ec0 <HAL_RCC_ClockConfig+0x1b4>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	4918      	ldr	r1, [pc, #96]	; (8001ec0 <HAL_RCC_ClockConfig+0x1b4>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0308 	and.w	r3, r3, #8
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d009      	beq.n	8001e82 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e6e:	4b14      	ldr	r3, [pc, #80]	; (8001ec0 <HAL_RCC_ClockConfig+0x1b4>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	4910      	ldr	r1, [pc, #64]	; (8001ec0 <HAL_RCC_ClockConfig+0x1b4>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e82:	f000 f825 	bl	8001ed0 <HAL_RCC_GetSysClockFreq>
 8001e86:	4601      	mov	r1, r0
 8001e88:	4b0d      	ldr	r3, [pc, #52]	; (8001ec0 <HAL_RCC_ClockConfig+0x1b4>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	091b      	lsrs	r3, r3, #4
 8001e8e:	f003 030f 	and.w	r3, r3, #15
 8001e92:	4a0c      	ldr	r2, [pc, #48]	; (8001ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e94:	5cd3      	ldrb	r3, [r2, r3]
 8001e96:	f003 031f 	and.w	r3, r3, #31
 8001e9a:	fa21 f303 	lsr.w	r3, r1, r3
 8001e9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ea2:	4b0a      	ldr	r3, [pc, #40]	; (8001ecc <HAL_RCC_ClockConfig+0x1c0>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7fe ff88 	bl	8000dbc <HAL_InitTick>
 8001eac:	4603      	mov	r3, r0
 8001eae:	72fb      	strb	r3, [r7, #11]

  return status;
 8001eb0:	7afb      	ldrb	r3, [r7, #11]
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40022000 	.word	0x40022000
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	08002114 	.word	0x08002114
 8001ec8:	20000000 	.word	0x20000000
 8001ecc:	20000004 	.word	0x20000004

08001ed0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b089      	sub	sp, #36	; 0x24
 8001ed4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61fb      	str	r3, [r7, #28]
 8001eda:	2300      	movs	r3, #0
 8001edc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ede:	4b3d      	ldr	r3, [pc, #244]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f003 030c 	and.w	r3, r3, #12
 8001ee6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ee8:	4b3a      	ldr	r3, [pc, #232]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	f003 0303 	and.w	r3, r3, #3
 8001ef0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d005      	beq.n	8001f04 <HAL_RCC_GetSysClockFreq+0x34>
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	2b0c      	cmp	r3, #12
 8001efc:	d121      	bne.n	8001f42 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d11e      	bne.n	8001f42 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f04:	4b33      	ldr	r3, [pc, #204]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0308 	and.w	r3, r3, #8
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d107      	bne.n	8001f20 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f10:	4b30      	ldr	r3, [pc, #192]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f16:	0a1b      	lsrs	r3, r3, #8
 8001f18:	f003 030f 	and.w	r3, r3, #15
 8001f1c:	61fb      	str	r3, [r7, #28]
 8001f1e:	e005      	b.n	8001f2c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f20:	4b2c      	ldr	r3, [pc, #176]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	091b      	lsrs	r3, r3, #4
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f2c:	4a2a      	ldr	r2, [pc, #168]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f34:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d10d      	bne.n	8001f58 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f40:	e00a      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	2b04      	cmp	r3, #4
 8001f46:	d102      	bne.n	8001f4e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f48:	4b24      	ldr	r3, [pc, #144]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f4a:	61bb      	str	r3, [r7, #24]
 8001f4c:	e004      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	2b08      	cmp	r3, #8
 8001f52:	d101      	bne.n	8001f58 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f54:	4b22      	ldr	r3, [pc, #136]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f56:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	2b0c      	cmp	r3, #12
 8001f5c:	d133      	bne.n	8001fc6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f5e:	4b1d      	ldr	r3, [pc, #116]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	f003 0303 	and.w	r3, r3, #3
 8001f66:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d002      	beq.n	8001f74 <HAL_RCC_GetSysClockFreq+0xa4>
 8001f6e:	2b03      	cmp	r3, #3
 8001f70:	d003      	beq.n	8001f7a <HAL_RCC_GetSysClockFreq+0xaa>
 8001f72:	e005      	b.n	8001f80 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f74:	4b19      	ldr	r3, [pc, #100]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f76:	617b      	str	r3, [r7, #20]
      break;
 8001f78:	e005      	b.n	8001f86 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f7a:	4b19      	ldr	r3, [pc, #100]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f7c:	617b      	str	r3, [r7, #20]
      break;
 8001f7e:	e002      	b.n	8001f86 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	617b      	str	r3, [r7, #20]
      break;
 8001f84:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f86:	4b13      	ldr	r3, [pc, #76]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	091b      	lsrs	r3, r3, #4
 8001f8c:	f003 0307 	and.w	r3, r3, #7
 8001f90:	3301      	adds	r3, #1
 8001f92:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f94:	4b0f      	ldr	r3, [pc, #60]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	0a1b      	lsrs	r3, r3, #8
 8001f9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f9e:	697a      	ldr	r2, [r7, #20]
 8001fa0:	fb02 f203 	mul.w	r2, r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001faa:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fac:	4b09      	ldr	r3, [pc, #36]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	0e5b      	lsrs	r3, r3, #25
 8001fb2:	f003 0303 	and.w	r3, r3, #3
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001fbc:	697a      	ldr	r2, [r7, #20]
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001fc6:	69bb      	ldr	r3, [r7, #24]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3724      	adds	r7, #36	; 0x24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	08002124 	.word	0x08002124
 8001fdc:	00f42400 	.word	0x00f42400
 8001fe0:	007a1200 	.word	0x007a1200

08001fe4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001fec:	2300      	movs	r3, #0
 8001fee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ff0:	4b2a      	ldr	r3, [pc, #168]	; (800209c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d003      	beq.n	8002004 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ffc:	f7ff fa02 	bl	8001404 <HAL_PWREx_GetVoltageRange>
 8002000:	6178      	str	r0, [r7, #20]
 8002002:	e014      	b.n	800202e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002004:	4b25      	ldr	r3, [pc, #148]	; (800209c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002008:	4a24      	ldr	r2, [pc, #144]	; (800209c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800200a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800200e:	6593      	str	r3, [r2, #88]	; 0x58
 8002010:	4b22      	ldr	r3, [pc, #136]	; (800209c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800201c:	f7ff f9f2 	bl	8001404 <HAL_PWREx_GetVoltageRange>
 8002020:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002022:	4b1e      	ldr	r3, [pc, #120]	; (800209c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002026:	4a1d      	ldr	r2, [pc, #116]	; (800209c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002028:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800202c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002034:	d10b      	bne.n	800204e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2b80      	cmp	r3, #128	; 0x80
 800203a:	d919      	bls.n	8002070 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2ba0      	cmp	r3, #160	; 0xa0
 8002040:	d902      	bls.n	8002048 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002042:	2302      	movs	r3, #2
 8002044:	613b      	str	r3, [r7, #16]
 8002046:	e013      	b.n	8002070 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002048:	2301      	movs	r3, #1
 800204a:	613b      	str	r3, [r7, #16]
 800204c:	e010      	b.n	8002070 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b80      	cmp	r3, #128	; 0x80
 8002052:	d902      	bls.n	800205a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002054:	2303      	movs	r3, #3
 8002056:	613b      	str	r3, [r7, #16]
 8002058:	e00a      	b.n	8002070 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2b80      	cmp	r3, #128	; 0x80
 800205e:	d102      	bne.n	8002066 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002060:	2302      	movs	r3, #2
 8002062:	613b      	str	r3, [r7, #16]
 8002064:	e004      	b.n	8002070 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b70      	cmp	r3, #112	; 0x70
 800206a:	d101      	bne.n	8002070 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800206c:	2301      	movs	r3, #1
 800206e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002070:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f023 0207 	bic.w	r2, r3, #7
 8002078:	4909      	ldr	r1, [pc, #36]	; (80020a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	4313      	orrs	r3, r2
 800207e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002080:	4b07      	ldr	r3, [pc, #28]	; (80020a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0307 	and.w	r3, r3, #7
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	429a      	cmp	r2, r3
 800208c:	d001      	beq.n	8002092 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e000      	b.n	8002094 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3718      	adds	r7, #24
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40021000 	.word	0x40021000
 80020a0:	40022000 	.word	0x40022000

080020a4 <__libc_init_array>:
 80020a4:	b570      	push	{r4, r5, r6, lr}
 80020a6:	4e0d      	ldr	r6, [pc, #52]	; (80020dc <__libc_init_array+0x38>)
 80020a8:	4c0d      	ldr	r4, [pc, #52]	; (80020e0 <__libc_init_array+0x3c>)
 80020aa:	1ba4      	subs	r4, r4, r6
 80020ac:	10a4      	asrs	r4, r4, #2
 80020ae:	2500      	movs	r5, #0
 80020b0:	42a5      	cmp	r5, r4
 80020b2:	d109      	bne.n	80020c8 <__libc_init_array+0x24>
 80020b4:	4e0b      	ldr	r6, [pc, #44]	; (80020e4 <__libc_init_array+0x40>)
 80020b6:	4c0c      	ldr	r4, [pc, #48]	; (80020e8 <__libc_init_array+0x44>)
 80020b8:	f000 f820 	bl	80020fc <_init>
 80020bc:	1ba4      	subs	r4, r4, r6
 80020be:	10a4      	asrs	r4, r4, #2
 80020c0:	2500      	movs	r5, #0
 80020c2:	42a5      	cmp	r5, r4
 80020c4:	d105      	bne.n	80020d2 <__libc_init_array+0x2e>
 80020c6:	bd70      	pop	{r4, r5, r6, pc}
 80020c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020cc:	4798      	blx	r3
 80020ce:	3501      	adds	r5, #1
 80020d0:	e7ee      	b.n	80020b0 <__libc_init_array+0xc>
 80020d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020d6:	4798      	blx	r3
 80020d8:	3501      	adds	r5, #1
 80020da:	e7f2      	b.n	80020c2 <__libc_init_array+0x1e>
 80020dc:	08002154 	.word	0x08002154
 80020e0:	08002154 	.word	0x08002154
 80020e4:	08002154 	.word	0x08002154
 80020e8:	08002158 	.word	0x08002158

080020ec <memset>:
 80020ec:	4402      	add	r2, r0
 80020ee:	4603      	mov	r3, r0
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d100      	bne.n	80020f6 <memset+0xa>
 80020f4:	4770      	bx	lr
 80020f6:	f803 1b01 	strb.w	r1, [r3], #1
 80020fa:	e7f9      	b.n	80020f0 <memset+0x4>

080020fc <_init>:
 80020fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020fe:	bf00      	nop
 8002100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002102:	bc08      	pop	{r3}
 8002104:	469e      	mov	lr, r3
 8002106:	4770      	bx	lr

08002108 <_fini>:
 8002108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800210a:	bf00      	nop
 800210c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800210e:	bc08      	pop	{r3}
 8002110:	469e      	mov	lr, r3
 8002112:	4770      	bx	lr
